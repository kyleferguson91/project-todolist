"use strict";
(self["webpackChunkproject_todolist"] = self["webpackChunkproject_todolist"] || []).push([["vendors-node_modules_ajv-keywords_index_js"],{

/***/ "./node_modules/ajv-keywords/index.js":
/*!********************************************!*\
  !*** ./node_modules/ajv-keywords/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var KEYWORDS = __webpack_require__(/*! ./keywords */ "./node_modules/ajv-keywords/keywords/index.js");

module.exports = defineKeywords;


/**
 * Defines one or several keywords in ajv instance
 * @param  {Ajv} ajv validator instance
 * @param  {String|Array<String>|undefined} keyword keyword(s) to define
 * @return {Ajv} ajv instance (for chaining)
 */
function defineKeywords(ajv, keyword) {
  if (Array.isArray(keyword)) {
    for (var i=0; i<keyword.length; i++)
      get(keyword[i])(ajv);
    return ajv;
  }
  if (keyword) {
    get(keyword)(ajv);
    return ajv;
  }
  for (keyword in KEYWORDS) get(keyword)(ajv);
  return ajv;
}


defineKeywords.get = get;

function get(keyword) {
  var defFunc = KEYWORDS[keyword];
  if (!defFunc) throw new Error('Unknown keyword ' + keyword);
  return defFunc;
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/_formatLimit.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/_formatLimit.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var TIME = /^(\d\d):(\d\d):(\d\d)(\.\d+)?(z|[+-]\d\d:\d\d)?$/i;
var DATE_TIME_SEPARATOR = /t|\s/i;

var COMPARE_FORMATS = {
  date: compareDate,
  time: compareTime,
  'date-time': compareDateTime
};

var $dataMetaSchema = {
  type: 'object',
  required: [ '$data' ],
  properties: {
    $data: {
      type: 'string',
      anyOf: [
        { format: 'relative-json-pointer' },
        { format: 'json-pointer' }
      ]
    }
  },
  additionalProperties: false
};

module.exports = function (minMax) {
  var keyword = 'format' + minMax;
  return function defFunc(ajv) {
    defFunc.definition = {
      type: 'string',
      inline: __webpack_require__(/*! ./dotjs/_formatLimit */ "./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js"),
      statements: true,
      errors: 'full',
      dependencies: ['format'],
      metaSchema: {
        anyOf: [
          {type: 'string'},
          $dataMetaSchema
        ]
      }
    };

    ajv.addKeyword(keyword, defFunc.definition);
    ajv.addKeyword('formatExclusive' + minMax, {
      dependencies: ['format' + minMax],
      metaSchema: {
        anyOf: [
          {type: 'boolean'},
          $dataMetaSchema
        ]
      }
    });
    extendFormats(ajv);
    return ajv;
  };
};


function extendFormats(ajv) {
  var formats = ajv._formats;
  for (var name in COMPARE_FORMATS) {
    var format = formats[name];
    // the last condition is needed if it's RegExp from another window
    if (typeof format != 'object' || format instanceof RegExp || !format.validate)
      format = formats[name] = { validate: format };
    if (!format.compare)
      format.compare = COMPARE_FORMATS[name];
  }
}


function compareDate(d1, d2) {
  if (!(d1 && d2)) return;
  if (d1 > d2) return 1;
  if (d1 < d2) return -1;
  if (d1 === d2) return 0;
}


function compareTime(t1, t2) {
  if (!(t1 && t2)) return;
  t1 = t1.match(TIME);
  t2 = t2.match(TIME);
  if (!(t1 && t2)) return;
  t1 = t1[1] + t1[2] + t1[3] + (t1[4]||'');
  t2 = t2[1] + t2[2] + t2[3] + (t2[4]||'');
  if (t1 > t2) return 1;
  if (t1 < t2) return -1;
  if (t1 === t2) return 0;
}


function compareDateTime(dt1, dt2) {
  if (!(dt1 && dt2)) return;
  dt1 = dt1.split(DATE_TIME_SEPARATOR);
  dt2 = dt2.split(DATE_TIME_SEPARATOR);
  var res = compareDate(dt1[0], dt2[0]);
  if (res === undefined) return;
  return res || compareTime(dt1[1], dt2[1]);
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/_util.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/_util.js ***!
  \*****************************************************/
/***/ ((module) => {



module.exports = {
  metaSchemaRef: metaSchemaRef
};

var META_SCHEMA_ID = 'http://json-schema.org/draft-07/schema';

function metaSchemaRef(ajv) {
  var defaultMeta = ajv._opts.defaultMeta;
  if (typeof defaultMeta == 'string') return { $ref: defaultMeta };
  if (ajv.getSchema(META_SCHEMA_ID)) return { $ref: META_SCHEMA_ID };
  console.warn('meta schema not defined');
  return {};
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/allRequired.js":
/*!***********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/allRequired.js ***!
  \***********************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function (schema, parentSchema) {
      if (!schema) return true;
      var properties = Object.keys(parentSchema.properties);
      if (properties.length == 0) return true;
      return {required: properties};
    },
    metaSchema: {type: 'boolean'},
    dependencies: ['properties']
  };

  ajv.addKeyword('allRequired', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/anyRequired.js":
/*!***********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/anyRequired.js ***!
  \***********************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function (schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {required: schema};
      var schemas = schema.map(function (prop) {
        return {required: [prop]};
      });
      return {anyOf: schemas};
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };

  ajv.addKeyword('anyRequired', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/deepProperties.js":
/*!**************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/deepProperties.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function (schema) {
      var schemas = [];
      for (var pointer in schema)
        schemas.push(getSchema(pointer, schema[pointer]));
      return {'allOf': schemas};
    },
    metaSchema: {
      type: 'object',
      propertyNames: {
        type: 'string',
        format: 'json-pointer'
      },
      additionalProperties: util.metaSchemaRef(ajv)
    }
  };

  ajv.addKeyword('deepProperties', defFunc.definition);
  return ajv;
};


function getSchema(jsonPointer, schema) {
  var segments = jsonPointer.split('/');
  var rootSchema = {};
  var pointerSchema = rootSchema;
  for (var i=1; i<segments.length; i++) {
    var segment = segments[i];
    var isLast = i == segments.length - 1;
    segment = unescapeJsonPointer(segment);
    var properties = pointerSchema.properties = {};
    var items = undefined;
    if (/[0-9]+/.test(segment)) {
      var count = +segment;
      items = pointerSchema.items = [];
      while (count--) items.push({});
    }
    pointerSchema = isLast ? schema : {};
    properties[segment] = pointerSchema;
    if (items) items.push(pointerSchema);
  }
  return rootSchema;
}


function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/deepRequired.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/deepRequired.js ***!
  \************************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: function (it, keyword, schema) {
      var expr = '';
      for (var i=0; i<schema.length; i++) {
        if (i) expr += ' && ';
        expr += '(' + getData(schema[i], it.dataLevel) + ' !== undefined)';
      }
      return expr;
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'json-pointer'
      }
    }
  };

  ajv.addKeyword('deepRequired', defFunc.definition);
  return ajv;
};


function getData(jsonPointer, lvl) {
  var data = 'data' + (lvl || '');
  if (!jsonPointer) return data;

  var expr = data;
  var segments = jsonPointer.split('/');
  for (var i=1; i<segments.length; i++) {
    var segment = segments[i];
    data += getProperty(unescapeJsonPointer(segment));
    expr += ' && ' + data;
  }
  return expr;
}


var IDENTIFIER = /^[a-z$_][a-z$_0-9]*$/i;
var INTEGER = /^[0-9]+$/;
var SINGLE_QUOTE = /'|\\/g;
function getProperty(key) {
  return INTEGER.test(key)
          ? '[' + key + ']'
          : IDENTIFIER.test(key)
            ? '.' + key
            : "['" + key.replace(SINGLE_QUOTE, '\\$&') + "']";
}


function unescapeJsonPointer(str) {
  return str.replace(/~1/g, '/').replace(/~0/g, '~');
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js":
/*!******************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/_formatLimit.js ***!
  \******************************************************************/
/***/ ((module) => {


module.exports = function generate__formatLimit(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $errorKeyword;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  out += 'var ' + ($valid) + ' = undefined;';
  if (it.opts.format === false) {
    out += ' ' + ($valid) + ' = true; ';
    return out;
  }
  var $schemaFormat = it.schema.format,
    $isDataFormat = it.opts.$data && $schemaFormat.$data,
    $closingBraces = '';
  if ($isDataFormat) {
    var $schemaValueFormat = it.util.getData($schemaFormat.$data, $dataLvl, it.dataPathArr),
      $format = 'format' + $lvl,
      $compare = 'compare' + $lvl;
    out += ' var ' + ($format) + ' = formats[' + ($schemaValueFormat) + '] , ' + ($compare) + ' = ' + ($format) + ' && ' + ($format) + '.compare;';
  } else {
    var $format = it.formats[$schemaFormat];
    if (!($format && $format.compare)) {
      out += '  ' + ($valid) + ' = true; ';
      return out;
    }
    var $compare = 'formats' + it.util.getProperty($schemaFormat) + '.compare';
  }
  var $isMax = $keyword == 'formatMaximum',
    $exclusiveKeyword = 'formatExclusive' + ($isMax ? 'Maximum' : 'Minimum'),
    $schemaExcl = it.schema[$exclusiveKeyword],
    $isDataExcl = it.opts.$data && $schemaExcl && $schemaExcl.$data,
    $op = $isMax ? '<' : '>',
    $result = 'result' + $lvl;
  var $isData = it.opts.$data && $schema && $schema.$data,
    $schemaValue;
  if ($isData) {
    out += ' var schema' + ($lvl) + ' = ' + (it.util.getData($schema.$data, $dataLvl, it.dataPathArr)) + '; ';
    $schemaValue = 'schema' + $lvl;
  } else {
    $schemaValue = $schema;
  }
  if ($isDataExcl) {
    var $schemaValueExcl = it.util.getData($schemaExcl.$data, $dataLvl, it.dataPathArr),
      $exclusive = 'exclusive' + $lvl,
      $opExpr = 'op' + $lvl,
      $opStr = '\' + ' + $opExpr + ' + \'';
    out += ' var schemaExcl' + ($lvl) + ' = ' + ($schemaValueExcl) + '; ';
    $schemaValueExcl = 'schemaExcl' + $lvl;
    out += ' if (typeof ' + ($schemaValueExcl) + ' != \'boolean\' && ' + ($schemaValueExcl) + ' !== undefined) { ' + ($valid) + ' = false; ';
    var $errorKeyword = $exclusiveKeyword;
    var $$outStack = $$outStack || [];
    $$outStack.push(out);
    out = ''; /* istanbul ignore else */
    if (it.createErrors !== false) {
      out += ' { keyword: \'' + ($errorKeyword || '_formatExclusiveLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: {} ';
      if (it.opts.messages !== false) {
        out += ' , message: \'' + ($exclusiveKeyword) + ' should be boolean\' ';
      }
      if (it.opts.verbose) {
        out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
      }
      out += ' } ';
    } else {
      out += ' {} ';
    }
    var __err = out;
    out = $$outStack.pop();
    if (!it.compositeRule && $breakOnError) {
      /* istanbul ignore if */
      if (it.async) {
        out += ' throw new ValidationError([' + (__err) + ']); ';
      } else {
        out += ' validate.errors = [' + (__err) + ']; return false; ';
      }
    } else {
      out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
    }
    out += ' }  ';
    if ($breakOnError) {
      $closingBraces += '}';
      out += ' else { ';
    }
    if ($isData) {
      out += ' if (' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'string\') ' + ($valid) + ' = false; else { ';
      $closingBraces += '}';
    }
    if ($isDataFormat) {
      out += ' if (!' + ($compare) + ') ' + ($valid) + ' = true; else { ';
      $closingBraces += '}';
    }
    out += ' var ' + ($result) + ' = ' + ($compare) + '(' + ($data) + ',  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += ' ); if (' + ($result) + ' === undefined) ' + ($valid) + ' = false; var ' + ($exclusive) + ' = ' + ($schemaValueExcl) + ' === true; if (' + ($valid) + ' === undefined) { ' + ($valid) + ' = ' + ($exclusive) + ' ? ' + ($result) + ' ' + ($op) + ' 0 : ' + ($result) + ' ' + ($op) + '= 0; } if (!' + ($valid) + ') var op' + ($lvl) + ' = ' + ($exclusive) + ' ? \'' + ($op) + '\' : \'' + ($op) + '=\';';
  } else {
    var $exclusive = $schemaExcl === true,
      $opStr = $op;
    if (!$exclusive) $opStr += '=';
    var $opExpr = '\'' + $opStr + '\'';
    if ($isData) {
      out += ' if (' + ($schemaValue) + ' === undefined) ' + ($valid) + ' = true; else if (typeof ' + ($schemaValue) + ' != \'string\') ' + ($valid) + ' = false; else { ';
      $closingBraces += '}';
    }
    if ($isDataFormat) {
      out += ' if (!' + ($compare) + ') ' + ($valid) + ' = true; else { ';
      $closingBraces += '}';
    }
    out += ' var ' + ($result) + ' = ' + ($compare) + '(' + ($data) + ',  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += ' ); if (' + ($result) + ' === undefined) ' + ($valid) + ' = false; if (' + ($valid) + ' === undefined) ' + ($valid) + ' = ' + ($result) + ' ' + ($op);
    if (!$exclusive) {
      out += '=';
    }
    out += ' 0;';
  }
  out += '' + ($closingBraces) + 'if (!' + ($valid) + ') { ';
  var $errorKeyword = $keyword;
  var $$outStack = $$outStack || [];
  $$outStack.push(out);
  out = ''; /* istanbul ignore else */
  if (it.createErrors !== false) {
    out += ' { keyword: \'' + ($errorKeyword || '_formatLimit') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { comparison: ' + ($opExpr) + ', limit:  ';
    if ($isData) {
      out += '' + ($schemaValue);
    } else {
      out += '' + (it.util.toQuotedString($schema));
    }
    out += ' , exclusive: ' + ($exclusive) + ' } ';
    if (it.opts.messages !== false) {
      out += ' , message: \'should be ' + ($opStr) + ' "';
      if ($isData) {
        out += '\' + ' + ($schemaValue) + ' + \'';
      } else {
        out += '' + (it.util.escapeQuotes($schema));
      }
      out += '"\' ';
    }
    if (it.opts.verbose) {
      out += ' , schema:  ';
      if ($isData) {
        out += 'validate.schema' + ($schemaPath);
      } else {
        out += '' + (it.util.toQuotedString($schema));
      }
      out += '         , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
    }
    out += ' } ';
  } else {
    out += ' {} ';
  }
  var __err = out;
  out = $$outStack.pop();
  if (!it.compositeRule && $breakOnError) {
    /* istanbul ignore if */
    if (it.async) {
      out += ' throw new ValidationError([' + (__err) + ']); ';
    } else {
      out += ' validate.errors = [' + (__err) + ']; return false; ';
    }
  } else {
    out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
  }
  out += '}';
  return out;
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js":
/*!*********************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js ***!
  \*********************************************************************/
/***/ ((module) => {


module.exports = function generate_patternRequired(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $key = 'key' + $lvl,
    $idx = 'idx' + $lvl,
    $matched = 'patternMatched' + $lvl,
    $dataProperties = 'dataProperties' + $lvl,
    $closingBraces = '',
    $ownProperties = it.opts.ownProperties;
  out += 'var ' + ($valid) + ' = true;';
  if ($ownProperties) {
    out += ' var ' + ($dataProperties) + ' = undefined;';
  }
  var arr1 = $schema;
  if (arr1) {
    var $pProperty, i1 = -1,
      l1 = arr1.length - 1;
    while (i1 < l1) {
      $pProperty = arr1[i1 += 1];
      out += ' var ' + ($matched) + ' = false;  ';
      if ($ownProperties) {
        out += ' ' + ($dataProperties) + ' = ' + ($dataProperties) + ' || Object.keys(' + ($data) + '); for (var ' + ($idx) + '=0; ' + ($idx) + '<' + ($dataProperties) + '.length; ' + ($idx) + '++) { var ' + ($key) + ' = ' + ($dataProperties) + '[' + ($idx) + ']; ';
      } else {
        out += ' for (var ' + ($key) + ' in ' + ($data) + ') { ';
      }
      out += ' ' + ($matched) + ' = ' + (it.usePattern($pProperty)) + '.test(' + ($key) + '); if (' + ($matched) + ') break; } ';
      var $missingPattern = it.util.escapeQuotes($pProperty);
      out += ' if (!' + ($matched) + ') { ' + ($valid) + ' = false;  var err =   '; /* istanbul ignore else */
      if (it.createErrors !== false) {
        out += ' { keyword: \'' + ('patternRequired') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { missingPattern: \'' + ($missingPattern) + '\' } ';
        if (it.opts.messages !== false) {
          out += ' , message: \'should have property matching pattern \\\'' + ($missingPattern) + '\\\'\' ';
        }
        if (it.opts.verbose) {
          out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
        }
        out += ' } ';
      } else {
        out += ' {} ';
      }
      out += ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; }   ';
      if ($breakOnError) {
        $closingBraces += '}';
        out += ' else { ';
      }
    }
  }
  out += '' + ($closingBraces);
  return out;
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dotjs/switch.js":
/*!************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dotjs/switch.js ***!
  \************************************************************/
/***/ ((module) => {


module.exports = function generate_switch(it, $keyword, $ruleType) {
  var out = ' ';
  var $lvl = it.level;
  var $dataLvl = it.dataLevel;
  var $schema = it.schema[$keyword];
  var $schemaPath = it.schemaPath + it.util.getProperty($keyword);
  var $errSchemaPath = it.errSchemaPath + '/' + $keyword;
  var $breakOnError = !it.opts.allErrors;
  var $data = 'data' + ($dataLvl || '');
  var $valid = 'valid' + $lvl;
  var $errs = 'errs__' + $lvl;
  var $it = it.util.copy(it);
  var $closingBraces = '';
  $it.level++;
  var $nextValid = 'valid' + $it.level;
  var $ifPassed = 'ifPassed' + it.level,
    $currentBaseId = $it.baseId,
    $shouldContinue;
  out += 'var ' + ($ifPassed) + ';';
  var arr1 = $schema;
  if (arr1) {
    var $sch, $caseIndex = -1,
      l1 = arr1.length - 1;
    while ($caseIndex < l1) {
      $sch = arr1[$caseIndex += 1];
      if ($caseIndex && !$shouldContinue) {
        out += ' if (!' + ($ifPassed) + ') { ';
        $closingBraces += '}';
      }
      if ($sch.if && (it.opts.strictKeywords ? typeof $sch.if == 'object' && Object.keys($sch.if).length > 0 : it.util.schemaHasRules($sch.if, it.RULES.all))) {
        out += ' var ' + ($errs) + ' = errors;   ';
        var $wasComposite = it.compositeRule;
        it.compositeRule = $it.compositeRule = true;
        $it.createErrors = false;
        $it.schema = $sch.if;
        $it.schemaPath = $schemaPath + '[' + $caseIndex + '].if';
        $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/if';
        out += '  ' + (it.validate($it)) + ' ';
        $it.baseId = $currentBaseId;
        $it.createErrors = true;
        it.compositeRule = $it.compositeRule = $wasComposite;
        out += ' ' + ($ifPassed) + ' = ' + ($nextValid) + '; if (' + ($ifPassed) + ') {  ';
        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('switch') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { caseIndex: ' + ($caseIndex) + ' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }
          out += ' var ' + ($nextValid) + ' = ' + ($sch.then) + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
        }
        out += '  } else {  errors = ' + ($errs) + '; if (vErrors !== null) { if (' + ($errs) + ') vErrors.length = ' + ($errs) + '; else vErrors = null; } } ';
      } else {
        out += ' ' + ($ifPassed) + ' = true;  ';
        if (typeof $sch.then == 'boolean') {
          if ($sch.then === false) {
            var $$outStack = $$outStack || [];
            $$outStack.push(out);
            out = ''; /* istanbul ignore else */
            if (it.createErrors !== false) {
              out += ' { keyword: \'' + ('switch') + '\' , dataPath: (dataPath || \'\') + ' + (it.errorPath) + ' , schemaPath: ' + (it.util.toQuotedString($errSchemaPath)) + ' , params: { caseIndex: ' + ($caseIndex) + ' } ';
              if (it.opts.messages !== false) {
                out += ' , message: \'should pass "switch" keyword validation\' ';
              }
              if (it.opts.verbose) {
                out += ' , schema: validate.schema' + ($schemaPath) + ' , parentSchema: validate.schema' + (it.schemaPath) + ' , data: ' + ($data) + ' ';
              }
              out += ' } ';
            } else {
              out += ' {} ';
            }
            var __err = out;
            out = $$outStack.pop();
            if (!it.compositeRule && $breakOnError) {
              /* istanbul ignore if */
              if (it.async) {
                out += ' throw new ValidationError([' + (__err) + ']); ';
              } else {
                out += ' validate.errors = [' + (__err) + ']; return false; ';
              }
            } else {
              out += ' var err = ' + (__err) + ';  if (vErrors === null) vErrors = [err]; else vErrors.push(err); errors++; ';
            }
          }
          out += ' var ' + ($nextValid) + ' = ' + ($sch.then) + '; ';
        } else {
          $it.schema = $sch.then;
          $it.schemaPath = $schemaPath + '[' + $caseIndex + '].then';
          $it.errSchemaPath = $errSchemaPath + '/' + $caseIndex + '/then';
          out += '  ' + (it.validate($it)) + ' ';
          $it.baseId = $currentBaseId;
        }
      }
      $shouldContinue = $sch.continue
    }
  }
  out += '' + ($closingBraces) + 'var ' + ($valid) + ' = ' + ($nextValid) + ';';
  return out;
}


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/dynamicDefaults.js":
/*!***************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/dynamicDefaults.js ***!
  \***************************************************************/
/***/ ((module) => {



var sequences = {};

var DEFAULTS = {
  timestamp: function() { return Date.now(); },
  datetime: function() { return (new Date).toISOString(); },
  date: function() { return (new Date).toISOString().slice(0, 10); },
  time: function() { return (new Date).toISOString().slice(11); },
  random: function() { return Math.random(); },
  randomint: function (args) {
    var limit = args && args.max || 2;
    return function() { return Math.floor(Math.random() * limit); };
  },
  seq: function (args) {
    var name = args && args.name || '';
    sequences[name] = sequences[name] || 0;
    return function() { return sequences[name]++; };
  }
};

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    compile: function (schema, parentSchema, it) {
      var funcs = {};

      for (var key in schema) {
        var d = schema[key];
        var func = getDefault(typeof d == 'string' ? d : d.func);
        funcs[key] = func.length ? func(d.args) : func;
      }

      return it.opts.useDefaults && !it.compositeRule
              ? assignDefaults
              : noop;

      function assignDefaults(data) {
        for (var prop in schema){
          if (data[prop] === undefined
            || (it.opts.useDefaults == 'empty'
            && (data[prop] === null || data[prop] === '')))
            data[prop] = funcs[prop]();
        }
        return true;
      }

      function noop() { return true; }
    },
    DEFAULTS: DEFAULTS,
    metaSchema: {
      type: 'object',
      additionalProperties: {
        type: ['string', 'object'],
        additionalProperties: false,
        required: ['func', 'args'],
        properties: {
          func: { type: 'string' },
          args: { type: 'object' }
        }
      }
    }
  };

  ajv.addKeyword('dynamicDefaults', defFunc.definition);
  return ajv;

  function getDefault(d) {
    var def = DEFAULTS[d];
    if (def) return def;
    throw new Error('invalid "dynamicDefaults" keyword property value: ' + d);
  }
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/formatMaximum.js":
/*!*************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/formatMaximum.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = __webpack_require__(/*! ./_formatLimit */ "./node_modules/ajv-keywords/keywords/_formatLimit.js")('Maximum');


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/formatMinimum.js":
/*!*************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/formatMinimum.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = __webpack_require__(/*! ./_formatLimit */ "./node_modules/ajv-keywords/keywords/_formatLimit.js")('Minimum');


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/index.js ***!
  \*****************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = {
  'instanceof': __webpack_require__(/*! ./instanceof */ "./node_modules/ajv-keywords/keywords/instanceof.js"),
  range: __webpack_require__(/*! ./range */ "./node_modules/ajv-keywords/keywords/range.js"),
  regexp: __webpack_require__(/*! ./regexp */ "./node_modules/ajv-keywords/keywords/regexp.js"),
  'typeof': __webpack_require__(/*! ./typeof */ "./node_modules/ajv-keywords/keywords/typeof.js"),
  dynamicDefaults: __webpack_require__(/*! ./dynamicDefaults */ "./node_modules/ajv-keywords/keywords/dynamicDefaults.js"),
  allRequired: __webpack_require__(/*! ./allRequired */ "./node_modules/ajv-keywords/keywords/allRequired.js"),
  anyRequired: __webpack_require__(/*! ./anyRequired */ "./node_modules/ajv-keywords/keywords/anyRequired.js"),
  oneRequired: __webpack_require__(/*! ./oneRequired */ "./node_modules/ajv-keywords/keywords/oneRequired.js"),
  prohibited: __webpack_require__(/*! ./prohibited */ "./node_modules/ajv-keywords/keywords/prohibited.js"),
  uniqueItemProperties: __webpack_require__(/*! ./uniqueItemProperties */ "./node_modules/ajv-keywords/keywords/uniqueItemProperties.js"),
  deepProperties: __webpack_require__(/*! ./deepProperties */ "./node_modules/ajv-keywords/keywords/deepProperties.js"),
  deepRequired: __webpack_require__(/*! ./deepRequired */ "./node_modules/ajv-keywords/keywords/deepRequired.js"),
  formatMinimum: __webpack_require__(/*! ./formatMinimum */ "./node_modules/ajv-keywords/keywords/formatMinimum.js"),
  formatMaximum: __webpack_require__(/*! ./formatMaximum */ "./node_modules/ajv-keywords/keywords/formatMaximum.js"),
  patternRequired: __webpack_require__(/*! ./patternRequired */ "./node_modules/ajv-keywords/keywords/patternRequired.js"),
  'switch': __webpack_require__(/*! ./switch */ "./node_modules/ajv-keywords/keywords/switch.js"),
  select: __webpack_require__(/*! ./select */ "./node_modules/ajv-keywords/keywords/select.js"),
  transform: __webpack_require__(/*! ./transform */ "./node_modules/ajv-keywords/keywords/transform.js")
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/instanceof.js":
/*!**********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/instanceof.js ***!
  \**********************************************************/
/***/ ((module) => {



var CONSTRUCTORS = {
  Object: Object,
  Array: Array,
  Function: Function,
  Number: Number,
  String: String,
  Date: Date,
  RegExp: RegExp
};

module.exports = function defFunc(ajv) {
  /* istanbul ignore else */
  if (typeof Buffer != 'undefined')
    CONSTRUCTORS.Buffer = Buffer;

  /* istanbul ignore else */
  if (typeof Promise != 'undefined')
    CONSTRUCTORS.Promise = Promise;

  defFunc.definition = {
    compile: function (schema) {
      if (typeof schema == 'string') {
        var Constructor = getConstructor(schema);
        return function (data) {
          return data instanceof Constructor;
        };
      }

      var constructors = schema.map(getConstructor);
      return function (data) {
        for (var i=0; i<constructors.length; i++)
          if (data instanceof constructors[i]) return true;
        return false;
      };
    },
    CONSTRUCTORS: CONSTRUCTORS,
    metaSchema: {
      anyOf: [
        { type: 'string' },
        {
          type: 'array',
          items: { type: 'string' }
        }
      ]
    }
  };

  ajv.addKeyword('instanceof', defFunc.definition);
  return ajv;

  function getConstructor(c) {
    var Constructor = CONSTRUCTORS[c];
    if (Constructor) return Constructor;
    throw new Error('invalid "instanceof" keyword value ' + c);
  }
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/oneRequired.js":
/*!***********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/oneRequired.js ***!
  \***********************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function (schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {required: schema};
      var schemas = schema.map(function (prop) {
        return {required: [prop]};
      });
      return {oneOf: schemas};
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };

  ajv.addKeyword('oneRequired', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/patternRequired.js":
/*!***************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/patternRequired.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    inline: __webpack_require__(/*! ./dotjs/patternRequired */ "./node_modules/ajv-keywords/keywords/dotjs/patternRequired.js"),
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        format: 'regex'
      },
      uniqueItems: true
    }
  };

  ajv.addKeyword('patternRequired', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/prohibited.js":
/*!**********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/prohibited.js ***!
  \**********************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'object',
    macro: function (schema) {
      if (schema.length == 0) return true;
      if (schema.length == 1) return {not: {required: schema}};
      var schemas = schema.map(function (prop) {
        return {required: [prop]};
      });
      return {not: {anyOf: schemas}};
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  };

  ajv.addKeyword('prohibited', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/range.js":
/*!*****************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/range.js ***!
  \*****************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'number',
    macro: function (schema, parentSchema) {
      var min = schema[0]
        , max = schema[1]
        , exclusive = parentSchema.exclusiveRange;

      validateRangeSchema(min, max, exclusive);

      return exclusive === true
              ? {exclusiveMinimum: min, exclusiveMaximum: max}
              : {minimum: min, maximum: max};
    },
    metaSchema: {
      type: 'array',
      minItems: 2,
      maxItems: 2,
      items: { type: 'number' }
    }
  };

  ajv.addKeyword('range', defFunc.definition);
  ajv.addKeyword('exclusiveRange');
  return ajv;

  function validateRangeSchema(min, max, exclusive) {
    if (exclusive !== undefined && typeof exclusive != 'boolean')
      throw new Error('Invalid schema for exclusiveRange keyword, should be boolean');

    if (min > max || (exclusive && min == max))
      throw new Error('There are no numbers in range');
  }
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/regexp.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/regexp.js ***!
  \******************************************************/
/***/ ((module) => {



module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'string',
    inline: function (it, keyword, schema) {
      return getRegExp() + '.test(data' + (it.dataLevel || '') + ')';

      function getRegExp() {
        try {
          if (typeof schema == 'object')
            return new RegExp(schema.pattern, schema.flags);

          var rx = schema.match(/^\/(.*)\/([gimuy]*)$/);
          if (rx) return new RegExp(rx[1], rx[2]);
          throw new Error('cannot parse string into RegExp');
        } catch(e) {
          console.error('regular expression', schema, 'is invalid');
          throw e;
        }
      }
    },
    metaSchema: {
      type: ['string', 'object'],
      properties: {
        pattern: { type: 'string' },
        flags: { type: 'string' }
      },
      required: ['pattern'],
      additionalProperties: false
    }
  };

  ajv.addKeyword('regexp', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/select.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/select.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  if (!ajv._opts.$data) {
    console.warn('keyword select requires $data option');
    return ajv;
  }
  var metaSchemaRef = util.metaSchemaRef(ajv);
  var compiledCaseSchemas = [];

  defFunc.definition = {
    validate: function v(schema, data, parentSchema) {
      if (parentSchema.selectCases === undefined)
        throw new Error('keyword "selectCases" is absent');
      var compiled = getCompiledSchemas(parentSchema, false);
      var validate = compiled.cases[schema];
      if (validate === undefined) validate = compiled.default;
      if (typeof validate == 'boolean') return validate;
      var valid = validate(data);
      if (!valid) v.errors = validate.errors;
      return valid;
    },
    $data: true,
    metaSchema: { type: ['string', 'number', 'boolean', 'null'] }
  };

  ajv.addKeyword('select', defFunc.definition);
  ajv.addKeyword('selectCases', {
    compile: function (schemas, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);
      for (var value in schemas)
        compiled.cases[value] = compileOrBoolean(schemas[value]);
      return function() { return true; };
    },
    valid: true,
    metaSchema: {
      type: 'object',
      additionalProperties: metaSchemaRef
    }
  });
  ajv.addKeyword('selectDefault', {
    compile: function (schema, parentSchema) {
      var compiled = getCompiledSchemas(parentSchema);
      compiled.default = compileOrBoolean(schema);
      return function() { return true; };
    },
    valid: true,
    metaSchema: metaSchemaRef
  });
  return ajv;


  function getCompiledSchemas(parentSchema, create) {
    var compiled;
    compiledCaseSchemas.some(function (c) {
      if (c.parentSchema === parentSchema) {
        compiled = c;
        return true;
      }
    });
    if (!compiled && create !== false) {
      compiled = {
        parentSchema: parentSchema,
        cases: {},
        default: true
      };
      compiledCaseSchemas.push(compiled);
    }
    return compiled;
  }

  function compileOrBoolean(schema) {
    return typeof schema == 'boolean'
            ? schema
            : ajv.compile(schema);
  }
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/switch.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/switch.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {



var util = __webpack_require__(/*! ./_util */ "./node_modules/ajv-keywords/keywords/_util.js");

module.exports = function defFunc(ajv) {
  if (ajv.RULES.keywords.switch && ajv.RULES.keywords.if) return;

  var metaSchemaRef = util.metaSchemaRef(ajv);

  defFunc.definition = {
    inline: __webpack_require__(/*! ./dotjs/switch */ "./node_modules/ajv-keywords/keywords/dotjs/switch.js"),
    statements: true,
    errors: 'full',
    metaSchema: {
      type: 'array',
      items: {
        required: [ 'then' ],
        properties: {
          'if': metaSchemaRef,
          'then': {
            anyOf: [
              { type: 'boolean' },
              metaSchemaRef
            ]
          },
          'continue': { type: 'boolean' }
        },
        additionalProperties: false,
        dependencies: {
          'continue': [ 'if' ]
        }
      }
    }
  };

  ajv.addKeyword('switch', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/transform.js":
/*!*********************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/transform.js ***!
  \*********************************************************/
/***/ ((module) => {



module.exports = function defFunc (ajv) {
  var transform = {
    trimLeft: function (value) {
      return value.replace(/^[\s]+/, '');
    },
    trimRight: function (value) {
      return value.replace(/[\s]+$/, '');
    },
    trim: function (value) {
      return value.trim();
    },
    toLowerCase: function (value) {
      return value.toLowerCase();
    },
    toUpperCase: function (value) {
      return value.toUpperCase();
    },
    toEnumCase: function (value, cfg) {
      return cfg.hash[makeHashTableKey(value)] || value;
    }
  };

  defFunc.definition = {
    type: 'string',
    errors: false,
    modifying: true,
    valid: true,
    compile: function (schema, parentSchema) {
      var cfg;

      if (schema.indexOf('toEnumCase') !== -1) {
        // build hash table to enum values
        cfg = {hash: {}};

        // requires `enum` in schema
        if (!parentSchema.enum)
          throw new Error('Missing enum. To use `transform:["toEnumCase"]`, `enum:[...]` is required.');
        for (var i = parentSchema.enum.length; i--; i) {
          var v = parentSchema.enum[i];
          if (typeof v !== 'string') continue;
          var k = makeHashTableKey(v);
          // requires all `enum` values have unique keys
          if (cfg.hash[k])
            throw new Error('Invalid enum uniqueness. To use `transform:["toEnumCase"]`, all values must be unique when case insensitive.');
          cfg.hash[k] = v;
        }
      }

      return function (data, dataPath, object, key) {
        // skip if value only
        if (!object) return;

        // apply transform in order provided
        for (var j = 0, l = schema.length; j < l; j++)
          data = transform[schema[j]](data, cfg);

        object[key] = data;
      };
    },
    metaSchema: {
      type: 'array',
      items: {
        type: 'string',
        enum: [
          'trimLeft', 'trimRight', 'trim',
          'toLowerCase', 'toUpperCase', 'toEnumCase'
        ]
      }
    }
  };

  ajv.addKeyword('transform', defFunc.definition);
  return ajv;

  function makeHashTableKey (value) {
    return value.toLowerCase();
  }
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/typeof.js":
/*!******************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/typeof.js ***!
  \******************************************************/
/***/ ((module) => {



var KNOWN_TYPES = ['undefined', 'string', 'number', 'object', 'function', 'boolean', 'symbol'];

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    inline: function (it, keyword, schema) {
      var data = 'data' + (it.dataLevel || '');
      if (typeof schema == 'string') return 'typeof ' + data + ' == "' + schema + '"';
      schema = 'validate.schema' + it.schemaPath + '.' + keyword;
      return schema + '.indexOf(typeof ' + data + ') >= 0';
    },
    metaSchema: {
      anyOf: [
        {
          type: 'string',
          enum: KNOWN_TYPES
        },
        {
          type: 'array',
          items: {
            type: 'string',
            enum: KNOWN_TYPES
          }
        }
      ]
    }
  };

  ajv.addKeyword('typeof', defFunc.definition);
  return ajv;
};


/***/ }),

/***/ "./node_modules/ajv-keywords/keywords/uniqueItemProperties.js":
/*!********************************************************************!*\
  !*** ./node_modules/ajv-keywords/keywords/uniqueItemProperties.js ***!
  \********************************************************************/
/***/ ((module) => {



var SCALAR_TYPES = ['number', 'integer', 'string', 'boolean', 'null'];

module.exports = function defFunc(ajv) {
  defFunc.definition = {
    type: 'array',
    compile: function(keys, parentSchema, it) {
      var equal = it.util.equal;
      var scalar = getScalarKeys(keys, parentSchema);

      return function(data) {
        if (data.length > 1) {
          for (var k=0; k < keys.length; k++) {
            var i, key = keys[k];
            if (scalar[k]) {
              var hash = {};
              for (i = data.length; i--;) {
                if (!data[i] || typeof data[i] != 'object') continue;
                var prop = data[i][key];
                if (prop && typeof prop == 'object') continue;
                if (typeof prop == 'string') prop = '"' + prop;
                if (hash[prop]) return false;
                hash[prop] = true;
              }
            } else {
              for (i = data.length; i--;) {
                if (!data[i] || typeof data[i] != 'object') continue;
                for (var j = i; j--;) {
                  if (data[j] && typeof data[j] == 'object' && equal(data[i][key], data[j][key]))
                    return false;
                }
              }
            }
          }
        }
        return true;
      };
    },
    metaSchema: {
      type: 'array',
      items: {type: 'string'}
    }
  };

  ajv.addKeyword('uniqueItemProperties', defFunc.definition);
  return ajv;
};


function getScalarKeys(keys, schema) {
  return keys.map(function(key) {
    var properties = schema.items && schema.items.properties;
    var propType = properties && properties[key] && properties[key].type;
    return Array.isArray(propType)
            ? propType.indexOf('object') < 0 && propType.indexOf('array') < 0
            : SCALAR_TYPES.indexOf(propType) >= 0;
  });
}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmVuZG9ycy1ub2RlX21vZHVsZXNfYWp2LWtleXdvcmRzX2luZGV4X2pzLm1haW4uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQWE7O0FBRWIsZUFBZSxtQkFBTyxDQUFDLGlFQUFZOztBQUVuQzs7O0FBR0E7QUFDQTtBQUNBLFlBQVksS0FBSztBQUNqQixZQUFZLGdDQUFnQztBQUM1QyxZQUFZLEtBQUs7QUFDakI7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGtCQUFrQjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7QUNsQ2E7O0FBRWI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVSxpQ0FBaUM7QUFDM0MsVUFBVTtBQUNWO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYyxtQkFBTyxDQUFDLHdGQUFzQjtBQUM1QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQjtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlDQUFpQztBQUNqQztBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQ3BHYTs7QUFFYjtBQUNBO0FBQ0E7O0FBRUE7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QUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O0FDL0VhOztBQUViOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7Ozs7Ozs7OztBQy9CYTs7QUFFYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHdCQUF3QixpQkFBaUI7QUFDekM7QUFDQTtBQUNBO0FBQ0Esb0NBQW9DLElBQUk7QUFDeEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxjQUFjO0FBQ2Qsb0NBQW9DLElBQUk7QUFDeEM7QUFDQSxnQ0FBZ0MsSUFBSTtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLGNBQWM7QUFDZDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9fZm9ybWF0TGltaXQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvX3V0aWwuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvYWxsUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvYW55UmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvZGVlcFByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvZGVlcFJlcXVpcmVkLmpzIiwid2VicGFjazovL3Byb2plY3QtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL2RvdGpzL19mb3JtYXRMaW1pdC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9kb3Rqcy9wYXR0ZXJuUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvZG90anMvc3dpdGNoLmpzIiwid2VicGFjazovL3Byb2plY3QtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL2R5bmFtaWNEZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9mb3JtYXRNYXhpbXVtLmpzIiwid2VicGFjazovL3Byb2plY3QtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL2Zvcm1hdE1pbmltdW0uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvaW5zdGFuY2VvZi5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9vbmVSZXF1aXJlZC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9wYXR0ZXJuUmVxdWlyZWQuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvcHJvaGliaXRlZC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9yYW5nZS5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy9yZWdleHAuanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvc2VsZWN0LmpzIiwid2VicGFjazovL3Byb2plY3QtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3N3aXRjaC5qcyIsIndlYnBhY2s6Ly9wcm9qZWN0LXRvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2Fqdi1rZXl3b3Jkcy9rZXl3b3Jkcy90cmFuc2Zvcm0uanMiLCJ3ZWJwYWNrOi8vcHJvamVjdC10b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9hanYta2V5d29yZHMva2V5d29yZHMvdHlwZW9mLmpzIiwid2VicGFjazovL3Byb2plY3QtdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvYWp2LWtleXdvcmRzL2tleXdvcmRzL3VuaXF1ZUl0ZW1Qcm9wZXJ0aWVzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxudmFyIEtFWVdPUkRTID0gcmVxdWlyZSgnLi9rZXl3b3JkcycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlZmluZUtleXdvcmRzO1xuXG5cbi8qKlxuICogRGVmaW5lcyBvbmUgb3Igc2V2ZXJhbCBrZXl3b3JkcyBpbiBhanYgaW5zdGFuY2VcbiAqIEBwYXJhbSAge0Fqdn0gYWp2IHZhbGlkYXRvciBpbnN0YW5jZVxuICogQHBhcmFtICB7U3RyaW5nfEFycmF5PFN0cmluZz58dW5kZWZpbmVkfSBrZXl3b3JkIGtleXdvcmQocykgdG8gZGVmaW5lXG4gKiBAcmV0dXJuIHtBanZ9IGFqdiBpbnN0YW5jZSAoZm9yIGNoYWluaW5nKVxuICovXG5mdW5jdGlvbiBkZWZpbmVLZXl3b3JkcyhhanYsIGtleXdvcmQpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoa2V5d29yZCkpIHtcbiAgICBmb3IgKHZhciBpPTA7IGk8a2V5d29yZC5sZW5ndGg7IGkrKylcbiAgICAgIGdldChrZXl3b3JkW2ldKShhanYpO1xuICAgIHJldHVybiBhanY7XG4gIH1cbiAgaWYgKGtleXdvcmQpIHtcbiAgICBnZXQoa2V5d29yZCkoYWp2KTtcbiAgICByZXR1cm4gYWp2O1xuICB9XG4gIGZvciAoa2V5d29yZCBpbiBLRVlXT1JEUykgZ2V0KGtleXdvcmQpKGFqdik7XG4gIHJldHVybiBhanY7XG59XG5cblxuZGVmaW5lS2V5d29yZHMuZ2V0ID0gZ2V0O1xuXG5mdW5jdGlvbiBnZXQoa2V5d29yZCkge1xuICB2YXIgZGVmRnVuYyA9IEtFWVdPUkRTW2tleXdvcmRdO1xuICBpZiAoIWRlZkZ1bmMpIHRocm93IG5ldyBFcnJvcignVW5rbm93biBrZXl3b3JkICcgKyBrZXl3b3JkKTtcbiAgcmV0dXJuIGRlZkZ1bmM7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBUSU1FID0gL14oXFxkXFxkKTooXFxkXFxkKTooXFxkXFxkKShcXC5cXGQrKT8oenxbKy1dXFxkXFxkOlxcZFxcZCk/JC9pO1xudmFyIERBVEVfVElNRV9TRVBBUkFUT1IgPSAvdHxcXHMvaTtcblxudmFyIENPTVBBUkVfRk9STUFUUyA9IHtcbiAgZGF0ZTogY29tcGFyZURhdGUsXG4gIHRpbWU6IGNvbXBhcmVUaW1lLFxuICAnZGF0ZS10aW1lJzogY29tcGFyZURhdGVUaW1lXG59O1xuXG52YXIgJGRhdGFNZXRhU2NoZW1hID0ge1xuICB0eXBlOiAnb2JqZWN0JyxcbiAgcmVxdWlyZWQ6IFsgJyRkYXRhJyBdLFxuICBwcm9wZXJ0aWVzOiB7XG4gICAgJGRhdGE6IHtcbiAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgYW55T2Y6IFtcbiAgICAgICAgeyBmb3JtYXQ6ICdyZWxhdGl2ZS1qc29uLXBvaW50ZXInIH0sXG4gICAgICAgIHsgZm9ybWF0OiAnanNvbi1wb2ludGVyJyB9XG4gICAgICBdXG4gICAgfVxuICB9LFxuICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2Vcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG1pbk1heCkge1xuICB2YXIga2V5d29yZCA9ICdmb3JtYXQnICsgbWluTWF4O1xuICByZXR1cm4gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgICB0eXBlOiAnc3RyaW5nJyxcbiAgICAgIGlubGluZTogcmVxdWlyZSgnLi9kb3Rqcy9fZm9ybWF0TGltaXQnKSxcbiAgICAgIHN0YXRlbWVudHM6IHRydWUsXG4gICAgICBlcnJvcnM6ICdmdWxsJyxcbiAgICAgIGRlcGVuZGVuY2llczogWydmb3JtYXQnXSxcbiAgICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICB7dHlwZTogJ3N0cmluZyd9LFxuICAgICAgICAgICRkYXRhTWV0YVNjaGVtYVxuICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcblxuICAgIGFqdi5hZGRLZXl3b3JkKGtleXdvcmQsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gICAgYWp2LmFkZEtleXdvcmQoJ2Zvcm1hdEV4Y2x1c2l2ZScgKyBtaW5NYXgsIHtcbiAgICAgIGRlcGVuZGVuY2llczogWydmb3JtYXQnICsgbWluTWF4XSxcbiAgICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICB7dHlwZTogJ2Jvb2xlYW4nfSxcbiAgICAgICAgICAkZGF0YU1ldGFTY2hlbWFcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH0pO1xuICAgIGV4dGVuZEZvcm1hdHMoYWp2KTtcbiAgICByZXR1cm4gYWp2O1xuICB9O1xufTtcblxuXG5mdW5jdGlvbiBleHRlbmRGb3JtYXRzKGFqdikge1xuICB2YXIgZm9ybWF0cyA9IGFqdi5fZm9ybWF0cztcbiAgZm9yICh2YXIgbmFtZSBpbiBDT01QQVJFX0ZPUk1BVFMpIHtcbiAgICB2YXIgZm9ybWF0ID0gZm9ybWF0c1tuYW1lXTtcbiAgICAvLyB0aGUgbGFzdCBjb25kaXRpb24gaXMgbmVlZGVkIGlmIGl0J3MgUmVnRXhwIGZyb20gYW5vdGhlciB3aW5kb3dcbiAgICBpZiAodHlwZW9mIGZvcm1hdCAhPSAnb2JqZWN0JyB8fCBmb3JtYXQgaW5zdGFuY2VvZiBSZWdFeHAgfHwgIWZvcm1hdC52YWxpZGF0ZSlcbiAgICAgIGZvcm1hdCA9IGZvcm1hdHNbbmFtZV0gPSB7IHZhbGlkYXRlOiBmb3JtYXQgfTtcbiAgICBpZiAoIWZvcm1hdC5jb21wYXJlKVxuICAgICAgZm9ybWF0LmNvbXBhcmUgPSBDT01QQVJFX0ZPUk1BVFNbbmFtZV07XG4gIH1cbn1cblxuXG5mdW5jdGlvbiBjb21wYXJlRGF0ZShkMSwgZDIpIHtcbiAgaWYgKCEoZDEgJiYgZDIpKSByZXR1cm47XG4gIGlmIChkMSA+IGQyKSByZXR1cm4gMTtcbiAgaWYgKGQxIDwgZDIpIHJldHVybiAtMTtcbiAgaWYgKGQxID09PSBkMikgcmV0dXJuIDA7XG59XG5cblxuZnVuY3Rpb24gY29tcGFyZVRpbWUodDEsIHQyKSB7XG4gIGlmICghKHQxICYmIHQyKSkgcmV0dXJuO1xuICB0MSA9IHQxLm1hdGNoKFRJTUUpO1xuICB0MiA9IHQyLm1hdGNoKFRJTUUpO1xuICBpZiAoISh0MSAmJiB0MikpIHJldHVybjtcbiAgdDEgPSB0MVsxXSArIHQxWzJdICsgdDFbM10gKyAodDFbNF18fCcnKTtcbiAgdDIgPSB0MlsxXSArIHQyWzJdICsgdDJbM10gKyAodDJbNF18fCcnKTtcbiAgaWYgKHQxID4gdDIpIHJldHVybiAxO1xuICBpZiAodDEgPCB0MikgcmV0dXJuIC0xO1xuICBpZiAodDEgPT09IHQyKSByZXR1cm4gMDtcbn1cblxuXG5mdW5jdGlvbiBjb21wYXJlRGF0ZVRpbWUoZHQxLCBkdDIpIHtcbiAgaWYgKCEoZHQxICYmIGR0MikpIHJldHVybjtcbiAgZHQxID0gZHQxLnNwbGl0KERBVEVfVElNRV9TRVBBUkFUT1IpO1xuICBkdDIgPSBkdDIuc3BsaXQoREFURV9USU1FX1NFUEFSQVRPUik7XG4gIHZhciByZXMgPSBjb21wYXJlRGF0ZShkdDFbMF0sIGR0MlswXSk7XG4gIGlmIChyZXMgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICByZXR1cm4gcmVzIHx8IGNvbXBhcmVUaW1lKGR0MVsxXSwgZHQyWzFdKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIG1ldGFTY2hlbWFSZWY6IG1ldGFTY2hlbWFSZWZcbn07XG5cbnZhciBNRVRBX1NDSEVNQV9JRCA9ICdodHRwOi8vanNvbi1zY2hlbWEub3JnL2RyYWZ0LTA3L3NjaGVtYSc7XG5cbmZ1bmN0aW9uIG1ldGFTY2hlbWFSZWYoYWp2KSB7XG4gIHZhciBkZWZhdWx0TWV0YSA9IGFqdi5fb3B0cy5kZWZhdWx0TWV0YTtcbiAgaWYgKHR5cGVvZiBkZWZhdWx0TWV0YSA9PSAnc3RyaW5nJykgcmV0dXJuIHsgJHJlZjogZGVmYXVsdE1ldGEgfTtcbiAgaWYgKGFqdi5nZXRTY2hlbWEoTUVUQV9TQ0hFTUFfSUQpKSByZXR1cm4geyAkcmVmOiBNRVRBX1NDSEVNQV9JRCB9O1xuICBjb25zb2xlLndhcm4oJ21ldGEgc2NoZW1hIG5vdCBkZWZpbmVkJyk7XG4gIHJldHVybiB7fTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgbWFjcm86IGZ1bmN0aW9uIChzY2hlbWEsIHBhcmVudFNjaGVtYSkge1xuICAgICAgaWYgKCFzY2hlbWEpIHJldHVybiB0cnVlO1xuICAgICAgdmFyIHByb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhwYXJlbnRTY2hlbWEucHJvcGVydGllcyk7XG4gICAgICBpZiAocHJvcGVydGllcy5sZW5ndGggPT0gMCkgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4ge3JlcXVpcmVkOiBwcm9wZXJ0aWVzfTtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHt0eXBlOiAnYm9vbGVhbid9LFxuICAgIGRlcGVuZGVuY2llczogWydwcm9wZXJ0aWVzJ11cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnYWxsUmVxdWlyZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgbWFjcm86IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgIGlmIChzY2hlbWEubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNjaGVtYS5sZW5ndGggPT0gMSkgcmV0dXJuIHtyZXF1aXJlZDogc2NoZW1hfTtcbiAgICAgIHZhciBzY2hlbWFzID0gc2NoZW1hLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4ge3JlcXVpcmVkOiBbcHJvcF19O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge2FueU9mOiBzY2hlbWFzfTtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnYW55UmVxdWlyZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWwgPSByZXF1aXJlKCcuL191dGlsJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIHR5cGU6ICdvYmplY3QnLFxuICAgIG1hY3JvOiBmdW5jdGlvbiAoc2NoZW1hKSB7XG4gICAgICB2YXIgc2NoZW1hcyA9IFtdO1xuICAgICAgZm9yICh2YXIgcG9pbnRlciBpbiBzY2hlbWEpXG4gICAgICAgIHNjaGVtYXMucHVzaChnZXRTY2hlbWEocG9pbnRlciwgc2NoZW1hW3BvaW50ZXJdKSk7XG4gICAgICByZXR1cm4geydhbGxPZic6IHNjaGVtYXN9O1xuICAgIH0sXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ29iamVjdCcsXG4gICAgICBwcm9wZXJ0eU5hbWVzOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBmb3JtYXQ6ICdqc29uLXBvaW50ZXInXG4gICAgICB9LFxuICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHV0aWwubWV0YVNjaGVtYVJlZihhanYpXG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdkZWVwUHJvcGVydGllcycsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG59O1xuXG5cbmZ1bmN0aW9uIGdldFNjaGVtYShqc29uUG9pbnRlciwgc2NoZW1hKSB7XG4gIHZhciBzZWdtZW50cyA9IGpzb25Qb2ludGVyLnNwbGl0KCcvJyk7XG4gIHZhciByb290U2NoZW1hID0ge307XG4gIHZhciBwb2ludGVyU2NoZW1hID0gcm9vdFNjaGVtYTtcbiAgZm9yICh2YXIgaT0xOyBpPHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNlZ21lbnQgPSBzZWdtZW50c1tpXTtcbiAgICB2YXIgaXNMYXN0ID0gaSA9PSBzZWdtZW50cy5sZW5ndGggLSAxO1xuICAgIHNlZ21lbnQgPSB1bmVzY2FwZUpzb25Qb2ludGVyKHNlZ21lbnQpO1xuICAgIHZhciBwcm9wZXJ0aWVzID0gcG9pbnRlclNjaGVtYS5wcm9wZXJ0aWVzID0ge307XG4gICAgdmFyIGl0ZW1zID0gdW5kZWZpbmVkO1xuICAgIGlmICgvWzAtOV0rLy50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICB2YXIgY291bnQgPSArc2VnbWVudDtcbiAgICAgIGl0ZW1zID0gcG9pbnRlclNjaGVtYS5pdGVtcyA9IFtdO1xuICAgICAgd2hpbGUgKGNvdW50LS0pIGl0ZW1zLnB1c2goe30pO1xuICAgIH1cbiAgICBwb2ludGVyU2NoZW1hID0gaXNMYXN0ID8gc2NoZW1hIDoge307XG4gICAgcHJvcGVydGllc1tzZWdtZW50XSA9IHBvaW50ZXJTY2hlbWE7XG4gICAgaWYgKGl0ZW1zKSBpdGVtcy5wdXNoKHBvaW50ZXJTY2hlbWEpO1xuICB9XG4gIHJldHVybiByb290U2NoZW1hO1xufVxuXG5cbmZ1bmN0aW9uIHVuZXNjYXBlSnNvblBvaW50ZXIoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvfjEvZywgJy8nKS5yZXBsYWNlKC9+MC9nLCAnficpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBpbmxpbmU6IGZ1bmN0aW9uIChpdCwga2V5d29yZCwgc2NoZW1hKSB7XG4gICAgICB2YXIgZXhwciA9ICcnO1xuICAgICAgZm9yICh2YXIgaT0wOyBpPHNjaGVtYS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoaSkgZXhwciArPSAnICYmICc7XG4gICAgICAgIGV4cHIgKz0gJygnICsgZ2V0RGF0YShzY2hlbWFbaV0sIGl0LmRhdGFMZXZlbCkgKyAnICE9PSB1bmRlZmluZWQpJztcbiAgICAgIH1cbiAgICAgIHJldHVybiBleHByO1xuICAgIH0sXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBmb3JtYXQ6ICdqc29uLXBvaW50ZXInXG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdkZWVwUmVxdWlyZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcblxuXG5mdW5jdGlvbiBnZXREYXRhKGpzb25Qb2ludGVyLCBsdmwpIHtcbiAgdmFyIGRhdGEgPSAnZGF0YScgKyAobHZsIHx8ICcnKTtcbiAgaWYgKCFqc29uUG9pbnRlcikgcmV0dXJuIGRhdGE7XG5cbiAgdmFyIGV4cHIgPSBkYXRhO1xuICB2YXIgc2VnbWVudHMgPSBqc29uUG9pbnRlci5zcGxpdCgnLycpO1xuICBmb3IgKHZhciBpPTE7IGk8c2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgc2VnbWVudCA9IHNlZ21lbnRzW2ldO1xuICAgIGRhdGEgKz0gZ2V0UHJvcGVydHkodW5lc2NhcGVKc29uUG9pbnRlcihzZWdtZW50KSk7XG4gICAgZXhwciArPSAnICYmICcgKyBkYXRhO1xuICB9XG4gIHJldHVybiBleHByO1xufVxuXG5cbnZhciBJREVOVElGSUVSID0gL15bYS16JF9dW2EteiRfMC05XSokL2k7XG52YXIgSU5URUdFUiA9IC9eWzAtOV0rJC87XG52YXIgU0lOR0xFX1FVT1RFID0gLyd8XFxcXC9nO1xuZnVuY3Rpb24gZ2V0UHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBJTlRFR0VSLnRlc3Qoa2V5KVxuICAgICAgICAgID8gJ1snICsga2V5ICsgJ10nXG4gICAgICAgICAgOiBJREVOVElGSUVSLnRlc3Qoa2V5KVxuICAgICAgICAgICAgPyAnLicgKyBrZXlcbiAgICAgICAgICAgIDogXCJbJ1wiICsga2V5LnJlcGxhY2UoU0lOR0xFX1FVT1RFLCAnXFxcXCQmJykgKyBcIiddXCI7XG59XG5cblxuZnVuY3Rpb24gdW5lc2NhcGVKc29uUG9pbnRlcihzdHIpIHtcbiAgcmV0dXJuIHN0ci5yZXBsYWNlKC9+MS9nLCAnLycpLnJlcGxhY2UoL34wL2csICd+Jyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGdlbmVyYXRlX19mb3JtYXRMaW1pdChpdCwgJGtleXdvcmQsICRydWxlVHlwZSkge1xuICB2YXIgb3V0ID0gJyAnO1xuICB2YXIgJGx2bCA9IGl0LmxldmVsO1xuICB2YXIgJGRhdGFMdmwgPSBpdC5kYXRhTGV2ZWw7XG4gIHZhciAkc2NoZW1hID0gaXQuc2NoZW1hWyRrZXl3b3JkXTtcbiAgdmFyICRzY2hlbWFQYXRoID0gaXQuc2NoZW1hUGF0aCArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJGtleXdvcmQpO1xuICB2YXIgJGVyclNjaGVtYVBhdGggPSBpdC5lcnJTY2hlbWFQYXRoICsgJy8nICsgJGtleXdvcmQ7XG4gIHZhciAkYnJlYWtPbkVycm9yID0gIWl0Lm9wdHMuYWxsRXJyb3JzO1xuICB2YXIgJGVycm9yS2V5d29yZDtcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICBvdXQgKz0gJ3ZhciAnICsgKCR2YWxpZCkgKyAnID0gdW5kZWZpbmVkOyc7XG4gIGlmIChpdC5vcHRzLmZvcm1hdCA9PT0gZmFsc2UpIHtcbiAgICBvdXQgKz0gJyAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgJztcbiAgICByZXR1cm4gb3V0O1xuICB9XG4gIHZhciAkc2NoZW1hRm9ybWF0ID0gaXQuc2NoZW1hLmZvcm1hdCxcbiAgICAkaXNEYXRhRm9ybWF0ID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hRm9ybWF0LiRkYXRhLFxuICAgICRjbG9zaW5nQnJhY2VzID0gJyc7XG4gIGlmICgkaXNEYXRhRm9ybWF0KSB7XG4gICAgdmFyICRzY2hlbWFWYWx1ZUZvcm1hdCA9IGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hRm9ybWF0LiRkYXRhLCAkZGF0YUx2bCwgaXQuZGF0YVBhdGhBcnIpLFxuICAgICAgJGZvcm1hdCA9ICdmb3JtYXQnICsgJGx2bCxcbiAgICAgICRjb21wYXJlID0gJ2NvbXBhcmUnICsgJGx2bDtcbiAgICBvdXQgKz0gJyB2YXIgJyArICgkZm9ybWF0KSArICcgPSBmb3JtYXRzWycgKyAoJHNjaGVtYVZhbHVlRm9ybWF0KSArICddICwgJyArICgkY29tcGFyZSkgKyAnID0gJyArICgkZm9ybWF0KSArICcgJiYgJyArICgkZm9ybWF0KSArICcuY29tcGFyZTsnO1xuICB9IGVsc2Uge1xuICAgIHZhciAkZm9ybWF0ID0gaXQuZm9ybWF0c1skc2NoZW1hRm9ybWF0XTtcbiAgICBpZiAoISgkZm9ybWF0ICYmICRmb3JtYXQuY29tcGFyZSkpIHtcbiAgICAgIG91dCArPSAnICAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgJztcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfVxuICAgIHZhciAkY29tcGFyZSA9ICdmb3JtYXRzJyArIGl0LnV0aWwuZ2V0UHJvcGVydHkoJHNjaGVtYUZvcm1hdCkgKyAnLmNvbXBhcmUnO1xuICB9XG4gIHZhciAkaXNNYXggPSAka2V5d29yZCA9PSAnZm9ybWF0TWF4aW11bScsXG4gICAgJGV4Y2x1c2l2ZUtleXdvcmQgPSAnZm9ybWF0RXhjbHVzaXZlJyArICgkaXNNYXggPyAnTWF4aW11bScgOiAnTWluaW11bScpLFxuICAgICRzY2hlbWFFeGNsID0gaXQuc2NoZW1hWyRleGNsdXNpdmVLZXl3b3JkXSxcbiAgICAkaXNEYXRhRXhjbCA9IGl0Lm9wdHMuJGRhdGEgJiYgJHNjaGVtYUV4Y2wgJiYgJHNjaGVtYUV4Y2wuJGRhdGEsXG4gICAgJG9wID0gJGlzTWF4ID8gJzwnIDogJz4nLFxuICAgICRyZXN1bHQgPSAncmVzdWx0JyArICRsdmw7XG4gIHZhciAkaXNEYXRhID0gaXQub3B0cy4kZGF0YSAmJiAkc2NoZW1hICYmICRzY2hlbWEuJGRhdGEsXG4gICAgJHNjaGVtYVZhbHVlO1xuICBpZiAoJGlzRGF0YSkge1xuICAgIG91dCArPSAnIHZhciBzY2hlbWEnICsgKCRsdmwpICsgJyA9ICcgKyAoaXQudXRpbC5nZXREYXRhKCRzY2hlbWEuJGRhdGEsICRkYXRhTHZsLCBpdC5kYXRhUGF0aEFycikpICsgJzsgJztcbiAgICAkc2NoZW1hVmFsdWUgPSAnc2NoZW1hJyArICRsdmw7XG4gIH0gZWxzZSB7XG4gICAgJHNjaGVtYVZhbHVlID0gJHNjaGVtYTtcbiAgfVxuICBpZiAoJGlzRGF0YUV4Y2wpIHtcbiAgICB2YXIgJHNjaGVtYVZhbHVlRXhjbCA9IGl0LnV0aWwuZ2V0RGF0YSgkc2NoZW1hRXhjbC4kZGF0YSwgJGRhdGFMdmwsIGl0LmRhdGFQYXRoQXJyKSxcbiAgICAgICRleGNsdXNpdmUgPSAnZXhjbHVzaXZlJyArICRsdmwsXG4gICAgICAkb3BFeHByID0gJ29wJyArICRsdmwsXG4gICAgICAkb3BTdHIgPSAnXFwnICsgJyArICRvcEV4cHIgKyAnICsgXFwnJztcbiAgICBvdXQgKz0gJyB2YXIgc2NoZW1hRXhjbCcgKyAoJGx2bCkgKyAnID0gJyArICgkc2NoZW1hVmFsdWVFeGNsKSArICc7ICc7XG4gICAgJHNjaGVtYVZhbHVlRXhjbCA9ICdzY2hlbWFFeGNsJyArICRsdmw7XG4gICAgb3V0ICs9ICcgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyAhPSBcXCdib29sZWFuXFwnICYmICcgKyAoJHNjaGVtYVZhbHVlRXhjbCkgKyAnICE9PSB1bmRlZmluZWQpIHsgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyAnO1xuICAgIHZhciAkZXJyb3JLZXl3b3JkID0gJGV4Y2x1c2l2ZUtleXdvcmQ7XG4gICAgdmFyICQkb3V0U3RhY2sgPSAkJG91dFN0YWNrIHx8IFtdO1xuICAgICQkb3V0U3RhY2sucHVzaChvdXQpO1xuICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChpdC5jcmVhdGVFcnJvcnMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJGVycm9yS2V5d29yZCB8fCAnX2Zvcm1hdEV4Y2x1c2l2ZUxpbWl0JykgKyAnXFwnICwgZGF0YVBhdGg6IChkYXRhUGF0aCB8fCBcXCdcXCcpICsgJyArIChpdC5lcnJvclBhdGgpICsgJyAsIHNjaGVtYVBhdGg6ICcgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkZXJyU2NoZW1hUGF0aCkpICsgJyAsIHBhcmFtczoge30gJztcbiAgICAgIGlmIChpdC5vcHRzLm1lc3NhZ2VzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJycgKyAoJGV4Y2x1c2l2ZUtleXdvcmQpICsgJyBzaG91bGQgYmUgYm9vbGVhblxcJyAnO1xuICAgICAgfVxuICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICBvdXQgKz0gJyAsIHNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArICgkc2NoZW1hUGF0aCkgKyAnICwgcGFyZW50U2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKGl0LnNjaGVtYVBhdGgpICsgJyAsIGRhdGE6ICcgKyAoJGRhdGEpICsgJyAnO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgfSAnO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB7fSAnO1xuICAgIH1cbiAgICB2YXIgX19lcnIgPSBvdXQ7XG4gICAgb3V0ID0gJCRvdXRTdGFjay5wb3AoKTtcbiAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXQuYXN5bmMpIHtcbiAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyB2YWxpZGF0ZS5lcnJvcnMgPSBbJyArIChfX2VycikgKyAnXTsgcmV0dXJuIGZhbHNlOyAnO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJyB2YXIgZXJyID0gJyArIChfX2VycikgKyAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7ICc7XG4gICAgfVxuICAgIG91dCArPSAnIH0gICc7XG4gICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICAgIG91dCArPSAnIGVsc2UgeyAnO1xuICAgIH1cbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ3N0cmluZ1xcJykgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsgJztcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICB9XG4gICAgaWYgKCRpc0RhdGFGb3JtYXQpIHtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkY29tcGFyZSkgKyAnKSAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgZWxzZSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciAnICsgKCRyZXN1bHQpICsgJyA9ICcgKyAoJGNvbXBhcmUpICsgJygnICsgKCRkYXRhKSArICcsICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyApOyBpZiAoJyArICgkcmVzdWx0KSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyB2YXIgJyArICgkZXhjbHVzaXZlKSArICcgPSAnICsgKCRzY2hlbWFWYWx1ZUV4Y2wpICsgJyA9PT0gdHJ1ZTsgaWYgKCcgKyAoJHZhbGlkKSArICcgPT09IHVuZGVmaW5lZCkgeyAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkZXhjbHVzaXZlKSArICcgPyAnICsgKCRyZXN1bHQpICsgJyAnICsgKCRvcCkgKyAnIDAgOiAnICsgKCRyZXN1bHQpICsgJyAnICsgKCRvcCkgKyAnPSAwOyB9IGlmICghJyArICgkdmFsaWQpICsgJykgdmFyIG9wJyArICgkbHZsKSArICcgPSAnICsgKCRleGNsdXNpdmUpICsgJyA/IFxcJycgKyAoJG9wKSArICdcXCcgOiBcXCcnICsgKCRvcCkgKyAnPVxcJzsnO1xuICB9IGVsc2Uge1xuICAgIHZhciAkZXhjbHVzaXZlID0gJHNjaGVtYUV4Y2wgPT09IHRydWUsXG4gICAgICAkb3BTdHIgPSAkb3A7XG4gICAgaWYgKCEkZXhjbHVzaXZlKSAkb3BTdHIgKz0gJz0nO1xuICAgIHZhciAkb3BFeHByID0gJ1xcJycgKyAkb3BTdHIgKyAnXFwnJztcbiAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgb3V0ICs9ICcgaWYgKCcgKyAoJHNjaGVtYVZhbHVlKSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IHRydWU7IGVsc2UgaWYgKHR5cGVvZiAnICsgKCRzY2hlbWFWYWx1ZSkgKyAnICE9IFxcJ3N0cmluZ1xcJykgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBlbHNlIHsgJztcbiAgICAgICRjbG9zaW5nQnJhY2VzICs9ICd9JztcbiAgICB9XG4gICAgaWYgKCRpc0RhdGFGb3JtYXQpIHtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkY29tcGFyZSkgKyAnKSAnICsgKCR2YWxpZCkgKyAnID0gdHJ1ZTsgZWxzZSB7ICc7XG4gICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgfVxuICAgIG91dCArPSAnIHZhciAnICsgKCRyZXN1bHQpICsgJyA9ICcgKyAoJGNvbXBhcmUpICsgJygnICsgKCRkYXRhKSArICcsICAnO1xuICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICBvdXQgKz0gJycgKyAoJHNjaGVtYVZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgIH1cbiAgICBvdXQgKz0gJyApOyBpZiAoJyArICgkcmVzdWx0KSArICcgPT09IHVuZGVmaW5lZCkgJyArICgkdmFsaWQpICsgJyA9IGZhbHNlOyBpZiAoJyArICgkdmFsaWQpICsgJyA9PT0gdW5kZWZpbmVkKSAnICsgKCR2YWxpZCkgKyAnID0gJyArICgkcmVzdWx0KSArICcgJyArICgkb3ApO1xuICAgIGlmICghJGV4Y2x1c2l2ZSkge1xuICAgICAgb3V0ICs9ICc9JztcbiAgICB9XG4gICAgb3V0ICs9ICcgMDsnO1xuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcykgKyAnaWYgKCEnICsgKCR2YWxpZCkgKyAnKSB7ICc7XG4gIHZhciAkZXJyb3JLZXl3b3JkID0gJGtleXdvcmQ7XG4gIHZhciAkJG91dFN0YWNrID0gJCRvdXRTdGFjayB8fCBbXTtcbiAgJCRvdXRTdGFjay5wdXNoKG91dCk7XG4gIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgIG91dCArPSAnIHsga2V5d29yZDogXFwnJyArICgkZXJyb3JLZXl3b3JkIHx8ICdfZm9ybWF0TGltaXQnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNvbXBhcmlzb246ICcgKyAoJG9wRXhwcikgKyAnLCBsaW1pdDogICc7XG4gICAgaWYgKCRpc0RhdGEpIHtcbiAgICAgIG91dCArPSAnJyArICgkc2NoZW1hVmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC50b1F1b3RlZFN0cmluZygkc2NoZW1hKSk7XG4gICAgfVxuICAgIG91dCArPSAnICwgZXhjbHVzaXZlOiAnICsgKCRleGNsdXNpdmUpICsgJyB9ICc7XG4gICAgaWYgKGl0Lm9wdHMubWVzc2FnZXMgIT09IGZhbHNlKSB7XG4gICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBiZSAnICsgKCRvcFN0cikgKyAnIFwiJztcbiAgICAgIGlmICgkaXNEYXRhKSB7XG4gICAgICAgIG91dCArPSAnXFwnICsgJyArICgkc2NoZW1hVmFsdWUpICsgJyArIFxcJyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJycgKyAoaXQudXRpbC5lc2NhcGVRdW90ZXMoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICdcIlxcJyAnO1xuICAgIH1cbiAgICBpZiAoaXQub3B0cy52ZXJib3NlKSB7XG4gICAgICBvdXQgKz0gJyAsIHNjaGVtYTogICc7XG4gICAgICBpZiAoJGlzRGF0YSkge1xuICAgICAgICBvdXQgKz0gJ3ZhbGlkYXRlLnNjaGVtYScgKyAoJHNjaGVtYVBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJHNjaGVtYSkpO1xuICAgICAgfVxuICAgICAgb3V0ICs9ICcgICAgICAgICAsIHBhcmVudFNjaGVtYTogdmFsaWRhdGUuc2NoZW1hJyArIChpdC5zY2hlbWFQYXRoKSArICcgLCBkYXRhOiAnICsgKCRkYXRhKSArICcgJztcbiAgICB9XG4gICAgb3V0ICs9ICcgfSAnO1xuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHt9ICc7XG4gIH1cbiAgdmFyIF9fZXJyID0gb3V0O1xuICBvdXQgPSAkJG91dFN0YWNrLnBvcCgpO1xuICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpdC5hc3luYykge1xuICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dCArPSAnIHZhbGlkYXRlLmVycm9ycyA9IFsnICsgKF9fZXJyKSArICddOyByZXR1cm4gZmFsc2U7ICc7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIG91dCArPSAnIHZhciBlcnIgPSAnICsgKF9fZXJyKSArICc7ICBpZiAodkVycm9ycyA9PT0gbnVsbCkgdkVycm9ycyA9IFtlcnJdOyBlbHNlIHZFcnJvcnMucHVzaChlcnIpOyBlcnJvcnMrKzsgJztcbiAgfVxuICBvdXQgKz0gJ30nO1xuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZW5lcmF0ZV9wYXR0ZXJuUmVxdWlyZWQoaXQsICRrZXl3b3JkLCAkcnVsZVR5cGUpIHtcbiAgdmFyIG91dCA9ICcgJztcbiAgdmFyICRsdmwgPSBpdC5sZXZlbDtcbiAgdmFyICRkYXRhTHZsID0gaXQuZGF0YUxldmVsO1xuICB2YXIgJHNjaGVtYSA9IGl0LnNjaGVtYVska2V5d29yZF07XG4gIHZhciAkc2NoZW1hUGF0aCA9IGl0LnNjaGVtYVBhdGggKyBpdC51dGlsLmdldFByb3BlcnR5KCRrZXl3b3JkKTtcbiAgdmFyICRlcnJTY2hlbWFQYXRoID0gaXQuZXJyU2NoZW1hUGF0aCArICcvJyArICRrZXl3b3JkO1xuICB2YXIgJGJyZWFrT25FcnJvciA9ICFpdC5vcHRzLmFsbEVycm9ycztcbiAgdmFyICRkYXRhID0gJ2RhdGEnICsgKCRkYXRhTHZsIHx8ICcnKTtcbiAgdmFyICR2YWxpZCA9ICd2YWxpZCcgKyAkbHZsO1xuICB2YXIgJGtleSA9ICdrZXknICsgJGx2bCxcbiAgICAkaWR4ID0gJ2lkeCcgKyAkbHZsLFxuICAgICRtYXRjaGVkID0gJ3BhdHRlcm5NYXRjaGVkJyArICRsdmwsXG4gICAgJGRhdGFQcm9wZXJ0aWVzID0gJ2RhdGFQcm9wZXJ0aWVzJyArICRsdmwsXG4gICAgJGNsb3NpbmdCcmFjZXMgPSAnJyxcbiAgICAkb3duUHJvcGVydGllcyA9IGl0Lm9wdHMub3duUHJvcGVydGllcztcbiAgb3V0ICs9ICd2YXIgJyArICgkdmFsaWQpICsgJyA9IHRydWU7JztcbiAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgb3V0ICs9ICcgdmFyICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgPSB1bmRlZmluZWQ7JztcbiAgfVxuICB2YXIgYXJyMSA9ICRzY2hlbWE7XG4gIGlmIChhcnIxKSB7XG4gICAgdmFyICRwUHJvcGVydHksIGkxID0gLTEsXG4gICAgICBsMSA9IGFycjEubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAoaTEgPCBsMSkge1xuICAgICAgJHBQcm9wZXJ0eSA9IGFycjFbaTEgKz0gMV07XG4gICAgICBvdXQgKz0gJyB2YXIgJyArICgkbWF0Y2hlZCkgKyAnID0gZmFsc2U7ICAnO1xuICAgICAgaWYgKCRvd25Qcm9wZXJ0aWVzKSB7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcgPSAnICsgKCRkYXRhUHJvcGVydGllcykgKyAnIHx8IE9iamVjdC5rZXlzKCcgKyAoJGRhdGEpICsgJyk7IGZvciAodmFyICcgKyAoJGlkeCkgKyAnPTA7ICcgKyAoJGlkeCkgKyAnPCcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICcubGVuZ3RoOyAnICsgKCRpZHgpICsgJysrKSB7IHZhciAnICsgKCRrZXkpICsgJyA9ICcgKyAoJGRhdGFQcm9wZXJ0aWVzKSArICdbJyArICgkaWR4KSArICddOyAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcgZm9yICh2YXIgJyArICgka2V5KSArICcgaW4gJyArICgkZGF0YSkgKyAnKSB7ICc7XG4gICAgICB9XG4gICAgICBvdXQgKz0gJyAnICsgKCRtYXRjaGVkKSArICcgPSAnICsgKGl0LnVzZVBhdHRlcm4oJHBQcm9wZXJ0eSkpICsgJy50ZXN0KCcgKyAoJGtleSkgKyAnKTsgaWYgKCcgKyAoJG1hdGNoZWQpICsgJykgYnJlYWs7IH0gJztcbiAgICAgIHZhciAkbWlzc2luZ1BhdHRlcm4gPSBpdC51dGlsLmVzY2FwZVF1b3RlcygkcFByb3BlcnR5KTtcbiAgICAgIG91dCArPSAnIGlmICghJyArICgkbWF0Y2hlZCkgKyAnKSB7ICcgKyAoJHZhbGlkKSArICcgPSBmYWxzZTsgIHZhciBlcnIgPSAgICc7IC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAoaXQuY3JlYXRlRXJyb3JzICE9PSBmYWxzZSkge1xuICAgICAgICBvdXQgKz0gJyB7IGtleXdvcmQ6IFxcJycgKyAoJ3BhdHRlcm5SZXF1aXJlZCcpICsgJ1xcJyAsIGRhdGFQYXRoOiAoZGF0YVBhdGggfHwgXFwnXFwnKSArICcgKyAoaXQuZXJyb3JQYXRoKSArICcgLCBzY2hlbWFQYXRoOiAnICsgKGl0LnV0aWwudG9RdW90ZWRTdHJpbmcoJGVyclNjaGVtYVBhdGgpKSArICcgLCBwYXJhbXM6IHsgbWlzc2luZ1BhdHRlcm46IFxcJycgKyAoJG1pc3NpbmdQYXR0ZXJuKSArICdcXCcgfSAnO1xuICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBoYXZlIHByb3BlcnR5IG1hdGNoaW5nIHBhdHRlcm4gXFxcXFxcJycgKyAoJG1pc3NpbmdQYXR0ZXJuKSArICdcXFxcXFwnXFwnICc7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgIH1cbiAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgIH1cbiAgICAgIG91dCArPSAnOyAgaWYgKHZFcnJvcnMgPT09IG51bGwpIHZFcnJvcnMgPSBbZXJyXTsgZWxzZSB2RXJyb3JzLnB1c2goZXJyKTsgZXJyb3JzKys7IH0gICAnO1xuICAgICAgaWYgKCRicmVha09uRXJyb3IpIHtcbiAgICAgICAgJGNsb3NpbmdCcmFjZXMgKz0gJ30nO1xuICAgICAgICBvdXQgKz0gJyBlbHNlIHsgJztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb3V0ICs9ICcnICsgKCRjbG9zaW5nQnJhY2VzKTtcbiAgcmV0dXJuIG91dDtcbn1cbiIsIid1c2Ugc3RyaWN0Jztcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2VuZXJhdGVfc3dpdGNoKGl0LCAka2V5d29yZCwgJHJ1bGVUeXBlKSB7XG4gIHZhciBvdXQgPSAnICc7XG4gIHZhciAkbHZsID0gaXQubGV2ZWw7XG4gIHZhciAkZGF0YUx2bCA9IGl0LmRhdGFMZXZlbDtcbiAgdmFyICRzY2hlbWEgPSBpdC5zY2hlbWFbJGtleXdvcmRdO1xuICB2YXIgJHNjaGVtYVBhdGggPSBpdC5zY2hlbWFQYXRoICsgaXQudXRpbC5nZXRQcm9wZXJ0eSgka2V5d29yZCk7XG4gIHZhciAkZXJyU2NoZW1hUGF0aCA9IGl0LmVyclNjaGVtYVBhdGggKyAnLycgKyAka2V5d29yZDtcbiAgdmFyICRicmVha09uRXJyb3IgPSAhaXQub3B0cy5hbGxFcnJvcnM7XG4gIHZhciAkZGF0YSA9ICdkYXRhJyArICgkZGF0YUx2bCB8fCAnJyk7XG4gIHZhciAkdmFsaWQgPSAndmFsaWQnICsgJGx2bDtcbiAgdmFyICRlcnJzID0gJ2VycnNfXycgKyAkbHZsO1xuICB2YXIgJGl0ID0gaXQudXRpbC5jb3B5KGl0KTtcbiAgdmFyICRjbG9zaW5nQnJhY2VzID0gJyc7XG4gICRpdC5sZXZlbCsrO1xuICB2YXIgJG5leHRWYWxpZCA9ICd2YWxpZCcgKyAkaXQubGV2ZWw7XG4gIHZhciAkaWZQYXNzZWQgPSAnaWZQYXNzZWQnICsgaXQubGV2ZWwsXG4gICAgJGN1cnJlbnRCYXNlSWQgPSAkaXQuYmFzZUlkLFxuICAgICRzaG91bGRDb250aW51ZTtcbiAgb3V0ICs9ICd2YXIgJyArICgkaWZQYXNzZWQpICsgJzsnO1xuICB2YXIgYXJyMSA9ICRzY2hlbWE7XG4gIGlmIChhcnIxKSB7XG4gICAgdmFyICRzY2gsICRjYXNlSW5kZXggPSAtMSxcbiAgICAgIGwxID0gYXJyMS5sZW5ndGggLSAxO1xuICAgIHdoaWxlICgkY2FzZUluZGV4IDwgbDEpIHtcbiAgICAgICRzY2ggPSBhcnIxWyRjYXNlSW5kZXggKz0gMV07XG4gICAgICBpZiAoJGNhc2VJbmRleCAmJiAhJHNob3VsZENvbnRpbnVlKSB7XG4gICAgICAgIG91dCArPSAnIGlmICghJyArICgkaWZQYXNzZWQpICsgJykgeyAnO1xuICAgICAgICAkY2xvc2luZ0JyYWNlcyArPSAnfSc7XG4gICAgICB9XG4gICAgICBpZiAoJHNjaC5pZiAmJiAoaXQub3B0cy5zdHJpY3RLZXl3b3JkcyA/IHR5cGVvZiAkc2NoLmlmID09ICdvYmplY3QnICYmIE9iamVjdC5rZXlzKCRzY2guaWYpLmxlbmd0aCA+IDAgOiBpdC51dGlsLnNjaGVtYUhhc1J1bGVzKCRzY2guaWYsIGl0LlJVTEVTLmFsbCkpKSB7XG4gICAgICAgIG91dCArPSAnIHZhciAnICsgKCRlcnJzKSArICcgPSBlcnJvcnM7ICAgJztcbiAgICAgICAgdmFyICR3YXNDb21wb3NpdGUgPSBpdC5jb21wb3NpdGVSdWxlO1xuICAgICAgICBpdC5jb21wb3NpdGVSdWxlID0gJGl0LmNvbXBvc2l0ZVJ1bGUgPSB0cnVlO1xuICAgICAgICAkaXQuY3JlYXRlRXJyb3JzID0gZmFsc2U7XG4gICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLmlmO1xuICAgICAgICAkaXQuc2NoZW1hUGF0aCA9ICRzY2hlbWFQYXRoICsgJ1snICsgJGNhc2VJbmRleCArICddLmlmJztcbiAgICAgICAgJGl0LmVyclNjaGVtYVBhdGggPSAkZXJyU2NoZW1hUGF0aCArICcvJyArICRjYXNlSW5kZXggKyAnL2lmJztcbiAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICRpdC5iYXNlSWQgPSAkY3VycmVudEJhc2VJZDtcbiAgICAgICAgJGl0LmNyZWF0ZUVycm9ycyA9IHRydWU7XG4gICAgICAgIGl0LmNvbXBvc2l0ZVJ1bGUgPSAkaXQuY29tcG9zaXRlUnVsZSA9ICR3YXNDb21wb3NpdGU7XG4gICAgICAgIG91dCArPSAnICcgKyAoJGlmUGFzc2VkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsgaWYgKCcgKyAoJGlmUGFzc2VkKSArICcpIHsgICc7XG4gICAgICAgIGlmICh0eXBlb2YgJHNjaC50aGVuID09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICgkc2NoLnRoZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdzd2l0Y2gnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNhc2VJbmRleDogJyArICgkY2FzZUluZGV4KSArICcgfSAnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBwYXNzIFwic3dpdGNoXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSAnICsgKCRzY2gudGhlbikgKyAnOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLnRoZW47XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRjYXNlSW5kZXggKyAnXS50aGVuJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGNhc2VJbmRleCArICcvdGhlbic7XG4gICAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICB9XG4gICAgICAgIG91dCArPSAnICB9IGVsc2UgeyAgZXJyb3JzID0gJyArICgkZXJycykgKyAnOyBpZiAodkVycm9ycyAhPT0gbnVsbCkgeyBpZiAoJyArICgkZXJycykgKyAnKSB2RXJyb3JzLmxlbmd0aCA9ICcgKyAoJGVycnMpICsgJzsgZWxzZSB2RXJyb3JzID0gbnVsbDsgfSB9ICc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvdXQgKz0gJyAnICsgKCRpZlBhc3NlZCkgKyAnID0gdHJ1ZTsgICc7XG4gICAgICAgIGlmICh0eXBlb2YgJHNjaC50aGVuID09ICdib29sZWFuJykge1xuICAgICAgICAgIGlmICgkc2NoLnRoZW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB2YXIgJCRvdXRTdGFjayA9ICQkb3V0U3RhY2sgfHwgW107XG4gICAgICAgICAgICAkJG91dFN0YWNrLnB1c2gob3V0KTtcbiAgICAgICAgICAgIG91dCA9ICcnOyAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGl0LmNyZWF0ZUVycm9ycyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgeyBrZXl3b3JkOiBcXCcnICsgKCdzd2l0Y2gnKSArICdcXCcgLCBkYXRhUGF0aDogKGRhdGFQYXRoIHx8IFxcJ1xcJykgKyAnICsgKGl0LmVycm9yUGF0aCkgKyAnICwgc2NoZW1hUGF0aDogJyArIChpdC51dGlsLnRvUXVvdGVkU3RyaW5nKCRlcnJTY2hlbWFQYXRoKSkgKyAnICwgcGFyYW1zOiB7IGNhc2VJbmRleDogJyArICgkY2FzZUluZGV4KSArICcgfSAnO1xuICAgICAgICAgICAgICBpZiAoaXQub3B0cy5tZXNzYWdlcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgICAgICAgICBvdXQgKz0gJyAsIG1lc3NhZ2U6IFxcJ3Nob3VsZCBwYXNzIFwic3dpdGNoXCIga2V5d29yZCB2YWxpZGF0aW9uXFwnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGl0Lm9wdHMudmVyYm9zZSkge1xuICAgICAgICAgICAgICAgIG91dCArPSAnICwgc2NoZW1hOiB2YWxpZGF0ZS5zY2hlbWEnICsgKCRzY2hlbWFQYXRoKSArICcgLCBwYXJlbnRTY2hlbWE6IHZhbGlkYXRlLnNjaGVtYScgKyAoaXQuc2NoZW1hUGF0aCkgKyAnICwgZGF0YTogJyArICgkZGF0YSkgKyAnICc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3V0ICs9ICcgfSAnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcge30gJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfX2VyciA9IG91dDtcbiAgICAgICAgICAgIG91dCA9ICQkb3V0U3RhY2sucG9wKCk7XG4gICAgICAgICAgICBpZiAoIWl0LmNvbXBvc2l0ZVJ1bGUgJiYgJGJyZWFrT25FcnJvcikge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKGl0LmFzeW5jKSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihbJyArIChfX2VycikgKyAnXSk7ICc7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgb3V0ICs9ICcgdmFsaWRhdGUuZXJyb3JzID0gWycgKyAoX19lcnIpICsgJ107IHJldHVybiBmYWxzZTsgJztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgb3V0ICs9ICcgdmFyIGVyciA9ICcgKyAoX19lcnIpICsgJzsgIGlmICh2RXJyb3JzID09PSBudWxsKSB2RXJyb3JzID0gW2Vycl07IGVsc2UgdkVycm9ycy5wdXNoKGVycik7IGVycm9ycysrOyAnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBvdXQgKz0gJyB2YXIgJyArICgkbmV4dFZhbGlkKSArICcgPSAnICsgKCRzY2gudGhlbikgKyAnOyAnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRpdC5zY2hlbWEgPSAkc2NoLnRoZW47XG4gICAgICAgICAgJGl0LnNjaGVtYVBhdGggPSAkc2NoZW1hUGF0aCArICdbJyArICRjYXNlSW5kZXggKyAnXS50aGVuJztcbiAgICAgICAgICAkaXQuZXJyU2NoZW1hUGF0aCA9ICRlcnJTY2hlbWFQYXRoICsgJy8nICsgJGNhc2VJbmRleCArICcvdGhlbic7XG4gICAgICAgICAgb3V0ICs9ICcgICcgKyAoaXQudmFsaWRhdGUoJGl0KSkgKyAnICc7XG4gICAgICAgICAgJGl0LmJhc2VJZCA9ICRjdXJyZW50QmFzZUlkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAkc2hvdWxkQ29udGludWUgPSAkc2NoLmNvbnRpbnVlXG4gICAgfVxuICB9XG4gIG91dCArPSAnJyArICgkY2xvc2luZ0JyYWNlcykgKyAndmFyICcgKyAoJHZhbGlkKSArICcgPSAnICsgKCRuZXh0VmFsaWQpICsgJzsnO1xuICByZXR1cm4gb3V0O1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgc2VxdWVuY2VzID0ge307XG5cbnZhciBERUZBVUxUUyA9IHtcbiAgdGltZXN0YW1wOiBmdW5jdGlvbigpIHsgcmV0dXJuIERhdGUubm93KCk7IH0sXG4gIGRhdGV0aW1lOiBmdW5jdGlvbigpIHsgcmV0dXJuIChuZXcgRGF0ZSkudG9JU09TdHJpbmcoKTsgfSxcbiAgZGF0ZTogZnVuY3Rpb24oKSB7IHJldHVybiAobmV3IERhdGUpLnRvSVNPU3RyaW5nKCkuc2xpY2UoMCwgMTApOyB9LFxuICB0aW1lOiBmdW5jdGlvbigpIHsgcmV0dXJuIChuZXcgRGF0ZSkudG9JU09TdHJpbmcoKS5zbGljZSgxMSk7IH0sXG4gIHJhbmRvbTogZnVuY3Rpb24oKSB7IHJldHVybiBNYXRoLnJhbmRvbSgpOyB9LFxuICByYW5kb21pbnQ6IGZ1bmN0aW9uIChhcmdzKSB7XG4gICAgdmFyIGxpbWl0ID0gYXJncyAmJiBhcmdzLm1heCB8fCAyO1xuICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGxpbWl0KTsgfTtcbiAgfSxcbiAgc2VxOiBmdW5jdGlvbiAoYXJncykge1xuICAgIHZhciBuYW1lID0gYXJncyAmJiBhcmdzLm5hbWUgfHwgJyc7XG4gICAgc2VxdWVuY2VzW25hbWVdID0gc2VxdWVuY2VzW25hbWVdIHx8IDA7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkgeyByZXR1cm4gc2VxdWVuY2VzW25hbWVdKys7IH07XG4gIH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIChzY2hlbWEsIHBhcmVudFNjaGVtYSwgaXQpIHtcbiAgICAgIHZhciBmdW5jcyA9IHt9O1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc2NoZW1hKSB7XG4gICAgICAgIHZhciBkID0gc2NoZW1hW2tleV07XG4gICAgICAgIHZhciBmdW5jID0gZ2V0RGVmYXVsdCh0eXBlb2YgZCA9PSAnc3RyaW5nJyA/IGQgOiBkLmZ1bmMpO1xuICAgICAgICBmdW5jc1trZXldID0gZnVuYy5sZW5ndGggPyBmdW5jKGQuYXJncykgOiBmdW5jO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gaXQub3B0cy51c2VEZWZhdWx0cyAmJiAhaXQuY29tcG9zaXRlUnVsZVxuICAgICAgICAgICAgICA/IGFzc2lnbkRlZmF1bHRzXG4gICAgICAgICAgICAgIDogbm9vcDtcblxuICAgICAgZnVuY3Rpb24gYXNzaWduRGVmYXVsdHMoZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBwcm9wIGluIHNjaGVtYSl7XG4gICAgICAgICAgaWYgKGRhdGFbcHJvcF0gPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgfHwgKGl0Lm9wdHMudXNlRGVmYXVsdHMgPT0gJ2VtcHR5J1xuICAgICAgICAgICAgJiYgKGRhdGFbcHJvcF0gPT09IG51bGwgfHwgZGF0YVtwcm9wXSA9PT0gJycpKSlcbiAgICAgICAgICAgIGRhdGFbcHJvcF0gPSBmdW5jc1twcm9wXSgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuXG4gICAgICBmdW5jdGlvbiBub29wKCkgeyByZXR1cm4gdHJ1ZTsgfVxuICAgIH0sXG4gICAgREVGQVVMVFM6IERFRkFVTFRTLFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdvYmplY3QnLFxuICAgICAgYWRkaXRpb25hbFByb3BlcnRpZXM6IHtcbiAgICAgICAgdHlwZTogWydzdHJpbmcnLCAnb2JqZWN0J10sXG4gICAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZSxcbiAgICAgICAgcmVxdWlyZWQ6IFsnZnVuYycsICdhcmdzJ10sXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICBmdW5jOiB7IHR5cGU6ICdzdHJpbmcnIH0sXG4gICAgICAgICAgYXJnczogeyB0eXBlOiAnb2JqZWN0JyB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ2R5bmFtaWNEZWZhdWx0cycsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG5cbiAgZnVuY3Rpb24gZ2V0RGVmYXVsdChkKSB7XG4gICAgdmFyIGRlZiA9IERFRkFVTFRTW2RdO1xuICAgIGlmIChkZWYpIHJldHVybiBkZWY7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIFwiZHluYW1pY0RlZmF1bHRzXCIga2V5d29yZCBwcm9wZXJ0eSB2YWx1ZTogJyArIGQpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vX2Zvcm1hdExpbWl0JykoJ01heGltdW0nKTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL19mb3JtYXRMaW1pdCcpKCdNaW5pbXVtJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAnaW5zdGFuY2VvZic6IHJlcXVpcmUoJy4vaW5zdGFuY2VvZicpLFxuICByYW5nZTogcmVxdWlyZSgnLi9yYW5nZScpLFxuICByZWdleHA6IHJlcXVpcmUoJy4vcmVnZXhwJyksXG4gICd0eXBlb2YnOiByZXF1aXJlKCcuL3R5cGVvZicpLFxuICBkeW5hbWljRGVmYXVsdHM6IHJlcXVpcmUoJy4vZHluYW1pY0RlZmF1bHRzJyksXG4gIGFsbFJlcXVpcmVkOiByZXF1aXJlKCcuL2FsbFJlcXVpcmVkJyksXG4gIGFueVJlcXVpcmVkOiByZXF1aXJlKCcuL2FueVJlcXVpcmVkJyksXG4gIG9uZVJlcXVpcmVkOiByZXF1aXJlKCcuL29uZVJlcXVpcmVkJyksXG4gIHByb2hpYml0ZWQ6IHJlcXVpcmUoJy4vcHJvaGliaXRlZCcpLFxuICB1bmlxdWVJdGVtUHJvcGVydGllczogcmVxdWlyZSgnLi91bmlxdWVJdGVtUHJvcGVydGllcycpLFxuICBkZWVwUHJvcGVydGllczogcmVxdWlyZSgnLi9kZWVwUHJvcGVydGllcycpLFxuICBkZWVwUmVxdWlyZWQ6IHJlcXVpcmUoJy4vZGVlcFJlcXVpcmVkJyksXG4gIGZvcm1hdE1pbmltdW06IHJlcXVpcmUoJy4vZm9ybWF0TWluaW11bScpLFxuICBmb3JtYXRNYXhpbXVtOiByZXF1aXJlKCcuL2Zvcm1hdE1heGltdW0nKSxcbiAgcGF0dGVyblJlcXVpcmVkOiByZXF1aXJlKCcuL3BhdHRlcm5SZXF1aXJlZCcpLFxuICAnc3dpdGNoJzogcmVxdWlyZSgnLi9zd2l0Y2gnKSxcbiAgc2VsZWN0OiByZXF1aXJlKCcuL3NlbGVjdCcpLFxuICB0cmFuc2Zvcm06IHJlcXVpcmUoJy4vdHJhbnNmb3JtJylcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBDT05TVFJVQ1RPUlMgPSB7XG4gIE9iamVjdDogT2JqZWN0LFxuICBBcnJheTogQXJyYXksXG4gIEZ1bmN0aW9uOiBGdW5jdGlvbixcbiAgTnVtYmVyOiBOdW1iZXIsXG4gIFN0cmluZzogU3RyaW5nLFxuICBEYXRlOiBEYXRlLFxuICBSZWdFeHA6IFJlZ0V4cFxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIEJ1ZmZlciAhPSAndW5kZWZpbmVkJylcbiAgICBDT05TVFJVQ1RPUlMuQnVmZmVyID0gQnVmZmVyO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICh0eXBlb2YgUHJvbWlzZSAhPSAndW5kZWZpbmVkJylcbiAgICBDT05TVFJVQ1RPUlMuUHJvbWlzZSA9IFByb21pc2U7XG5cbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIGNvbXBpbGU6IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgIGlmICh0eXBlb2Ygc2NoZW1hID09ICdzdHJpbmcnKSB7XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvciA9IGdldENvbnN0cnVjdG9yKHNjaGVtYSk7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgQ29uc3RydWN0b3I7XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIHZhciBjb25zdHJ1Y3RvcnMgPSBzY2hlbWEubWFwKGdldENvbnN0cnVjdG9yKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICBmb3IgKHZhciBpPTA7IGk8Y29uc3RydWN0b3JzLmxlbmd0aDsgaSsrKVxuICAgICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgY29uc3RydWN0b3JzW2ldKSByZXR1cm4gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfTtcbiAgICB9LFxuICAgIENPTlNUUlVDVE9SUzogQ09OU1RSVUNUT1JTLFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIGFueU9mOiBbXG4gICAgICAgIHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgaXRlbXM6IHsgdHlwZTogJ3N0cmluZycgfVxuICAgICAgICB9XG4gICAgICBdXG4gICAgfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdpbnN0YW5jZW9mJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcblxuICBmdW5jdGlvbiBnZXRDb25zdHJ1Y3RvcihjKSB7XG4gICAgdmFyIENvbnN0cnVjdG9yID0gQ09OU1RSVUNUT1JTW2NdO1xuICAgIGlmIChDb25zdHJ1Y3RvcikgcmV0dXJuIENvbnN0cnVjdG9yO1xuICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBcImluc3RhbmNlb2ZcIiBrZXl3b3JkIHZhbHVlICcgKyBjKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgbWFjcm86IGZ1bmN0aW9uIChzY2hlbWEpIHtcbiAgICAgIGlmIChzY2hlbWEubGVuZ3RoID09IDApIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHNjaGVtYS5sZW5ndGggPT0gMSkgcmV0dXJuIHtyZXF1aXJlZDogc2NoZW1hfTtcbiAgICAgIHZhciBzY2hlbWFzID0gc2NoZW1hLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICByZXR1cm4ge3JlcXVpcmVkOiBbcHJvcF19O1xuICAgICAgfSk7XG4gICAgICByZXR1cm4ge29uZU9mOiBzY2hlbWFzfTtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgnb25lUmVxdWlyZWQnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICByZXR1cm4gYWp2O1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ29iamVjdCcsXG4gICAgaW5saW5lOiByZXF1aXJlKCcuL2RvdGpzL3BhdHRlcm5SZXF1aXJlZCcpLFxuICAgIHN0YXRlbWVudHM6IHRydWUsXG4gICAgZXJyb3JzOiAnZnVsbCcsXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBmb3JtYXQ6ICdyZWdleCdcbiAgICAgIH0sXG4gICAgICB1bmlxdWVJdGVtczogdHJ1ZVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgncGF0dGVyblJlcXVpcmVkJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIHR5cGU6ICdvYmplY3QnLFxuICAgIG1hY3JvOiBmdW5jdGlvbiAoc2NoZW1hKSB7XG4gICAgICBpZiAoc2NoZW1hLmxlbmd0aCA9PSAwKSByZXR1cm4gdHJ1ZTtcbiAgICAgIGlmIChzY2hlbWEubGVuZ3RoID09IDEpIHJldHVybiB7bm90OiB7cmVxdWlyZWQ6IHNjaGVtYX19O1xuICAgICAgdmFyIHNjaGVtYXMgPSBzY2hlbWEubWFwKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgICAgIHJldHVybiB7cmVxdWlyZWQ6IFtwcm9wXX07XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7bm90OiB7YW55T2Y6IHNjaGVtYXN9fTtcbiAgICB9LFxuICAgIG1ldGFTY2hlbWE6IHtcbiAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICBpdGVtczoge1xuICAgICAgICB0eXBlOiAnc3RyaW5nJ1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgncHJvaGliaXRlZCcsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICB0eXBlOiAnbnVtYmVyJyxcbiAgICBtYWNybzogZnVuY3Rpb24gKHNjaGVtYSwgcGFyZW50U2NoZW1hKSB7XG4gICAgICB2YXIgbWluID0gc2NoZW1hWzBdXG4gICAgICAgICwgbWF4ID0gc2NoZW1hWzFdXG4gICAgICAgICwgZXhjbHVzaXZlID0gcGFyZW50U2NoZW1hLmV4Y2x1c2l2ZVJhbmdlO1xuXG4gICAgICB2YWxpZGF0ZVJhbmdlU2NoZW1hKG1pbiwgbWF4LCBleGNsdXNpdmUpO1xuXG4gICAgICByZXR1cm4gZXhjbHVzaXZlID09PSB0cnVlXG4gICAgICAgICAgICAgID8ge2V4Y2x1c2l2ZU1pbmltdW06IG1pbiwgZXhjbHVzaXZlTWF4aW11bTogbWF4fVxuICAgICAgICAgICAgICA6IHttaW5pbXVtOiBtaW4sIG1heGltdW06IG1heH07XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgbWluSXRlbXM6IDIsXG4gICAgICBtYXhJdGVtczogMixcbiAgICAgIGl0ZW1zOiB7IHR5cGU6ICdudW1iZXInIH1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3JhbmdlJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgYWp2LmFkZEtleXdvcmQoJ2V4Y2x1c2l2ZVJhbmdlJyk7XG4gIHJldHVybiBhanY7XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVSYW5nZVNjaGVtYShtaW4sIG1heCwgZXhjbHVzaXZlKSB7XG4gICAgaWYgKGV4Y2x1c2l2ZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBleGNsdXNpdmUgIT0gJ2Jvb2xlYW4nKVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIHNjaGVtYSBmb3IgZXhjbHVzaXZlUmFuZ2Uga2V5d29yZCwgc2hvdWxkIGJlIGJvb2xlYW4nKTtcblxuICAgIGlmIChtaW4gPiBtYXggfHwgKGV4Y2x1c2l2ZSAmJiBtaW4gPT0gbWF4KSlcbiAgICAgIHRocm93IG5ldyBFcnJvcignVGhlcmUgYXJlIG5vIG51bWJlcnMgaW4gcmFuZ2UnKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgaW5saW5lOiBmdW5jdGlvbiAoaXQsIGtleXdvcmQsIHNjaGVtYSkge1xuICAgICAgcmV0dXJuIGdldFJlZ0V4cCgpICsgJy50ZXN0KGRhdGEnICsgKGl0LmRhdGFMZXZlbCB8fCAnJykgKyAnKSc7XG5cbiAgICAgIGZ1bmN0aW9uIGdldFJlZ0V4cCgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAodHlwZW9mIHNjaGVtYSA9PSAnb2JqZWN0JylcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKHNjaGVtYS5wYXR0ZXJuLCBzY2hlbWEuZmxhZ3MpO1xuXG4gICAgICAgICAgdmFyIHJ4ID0gc2NoZW1hLm1hdGNoKC9eXFwvKC4qKVxcLyhbZ2ltdXldKikkLyk7XG4gICAgICAgICAgaWYgKHJ4KSByZXR1cm4gbmV3IFJlZ0V4cChyeFsxXSwgcnhbMl0pO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHBhcnNlIHN0cmluZyBpbnRvIFJlZ0V4cCcpO1xuICAgICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdyZWd1bGFyIGV4cHJlc3Npb24nLCBzY2hlbWEsICdpcyBpbnZhbGlkJyk7XG4gICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogWydzdHJpbmcnLCAnb2JqZWN0J10sXG4gICAgICBwcm9wZXJ0aWVzOiB7XG4gICAgICAgIHBhdHRlcm46IHsgdHlwZTogJ3N0cmluZycgfSxcbiAgICAgICAgZmxhZ3M6IHsgdHlwZTogJ3N0cmluZycgfVxuICAgICAgfSxcbiAgICAgIHJlcXVpcmVkOiBbJ3BhdHRlcm4nXSxcbiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBmYWxzZVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgncmVnZXhwJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciB1dGlsID0gcmVxdWlyZSgnLi9fdXRpbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGlmICghYWp2Ll9vcHRzLiRkYXRhKSB7XG4gICAgY29uc29sZS53YXJuKCdrZXl3b3JkIHNlbGVjdCByZXF1aXJlcyAkZGF0YSBvcHRpb24nKTtcbiAgICByZXR1cm4gYWp2O1xuICB9XG4gIHZhciBtZXRhU2NoZW1hUmVmID0gdXRpbC5tZXRhU2NoZW1hUmVmKGFqdik7XG4gIHZhciBjb21waWxlZENhc2VTY2hlbWFzID0gW107XG5cbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIHZhbGlkYXRlOiBmdW5jdGlvbiB2KHNjaGVtYSwgZGF0YSwgcGFyZW50U2NoZW1hKSB7XG4gICAgICBpZiAocGFyZW50U2NoZW1hLnNlbGVjdENhc2VzID09PSB1bmRlZmluZWQpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcigna2V5d29yZCBcInNlbGVjdENhc2VzXCIgaXMgYWJzZW50Jyk7XG4gICAgICB2YXIgY29tcGlsZWQgPSBnZXRDb21waWxlZFNjaGVtYXMocGFyZW50U2NoZW1hLCBmYWxzZSk7XG4gICAgICB2YXIgdmFsaWRhdGUgPSBjb21waWxlZC5jYXNlc1tzY2hlbWFdO1xuICAgICAgaWYgKHZhbGlkYXRlID09PSB1bmRlZmluZWQpIHZhbGlkYXRlID0gY29tcGlsZWQuZGVmYXVsdDtcbiAgICAgIGlmICh0eXBlb2YgdmFsaWRhdGUgPT0gJ2Jvb2xlYW4nKSByZXR1cm4gdmFsaWRhdGU7XG4gICAgICB2YXIgdmFsaWQgPSB2YWxpZGF0ZShkYXRhKTtcbiAgICAgIGlmICghdmFsaWQpIHYuZXJyb3JzID0gdmFsaWRhdGUuZXJyb3JzO1xuICAgICAgcmV0dXJuIHZhbGlkO1xuICAgIH0sXG4gICAgJGRhdGE6IHRydWUsXG4gICAgbWV0YVNjaGVtYTogeyB0eXBlOiBbJ3N0cmluZycsICdudW1iZXInLCAnYm9vbGVhbicsICdudWxsJ10gfVxuICB9O1xuXG4gIGFqdi5hZGRLZXl3b3JkKCdzZWxlY3QnLCBkZWZGdW5jLmRlZmluaXRpb24pO1xuICBhanYuYWRkS2V5d29yZCgnc2VsZWN0Q2FzZXMnLCB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHNjaGVtYXMsIHBhcmVudFNjaGVtYSkge1xuICAgICAgdmFyIGNvbXBpbGVkID0gZ2V0Q29tcGlsZWRTY2hlbWFzKHBhcmVudFNjaGVtYSk7XG4gICAgICBmb3IgKHZhciB2YWx1ZSBpbiBzY2hlbWFzKVxuICAgICAgICBjb21waWxlZC5jYXNlc1t2YWx1ZV0gPSBjb21waWxlT3JCb29sZWFuKHNjaGVtYXNbdmFsdWVdKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbigpIHsgcmV0dXJuIHRydWU7IH07XG4gICAgfSxcbiAgICB2YWxpZDogdHJ1ZSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICAgIGFkZGl0aW9uYWxQcm9wZXJ0aWVzOiBtZXRhU2NoZW1hUmVmXG4gICAgfVxuICB9KTtcbiAgYWp2LmFkZEtleXdvcmQoJ3NlbGVjdERlZmF1bHQnLCB7XG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHNjaGVtYSwgcGFyZW50U2NoZW1hKSB7XG4gICAgICB2YXIgY29tcGlsZWQgPSBnZXRDb21waWxlZFNjaGVtYXMocGFyZW50U2NoZW1hKTtcbiAgICAgIGNvbXBpbGVkLmRlZmF1bHQgPSBjb21waWxlT3JCb29sZWFuKHNjaGVtYSk7XG4gICAgICByZXR1cm4gZnVuY3Rpb24oKSB7IHJldHVybiB0cnVlOyB9O1xuICAgIH0sXG4gICAgdmFsaWQ6IHRydWUsXG4gICAgbWV0YVNjaGVtYTogbWV0YVNjaGVtYVJlZlxuICB9KTtcbiAgcmV0dXJuIGFqdjtcblxuXG4gIGZ1bmN0aW9uIGdldENvbXBpbGVkU2NoZW1hcyhwYXJlbnRTY2hlbWEsIGNyZWF0ZSkge1xuICAgIHZhciBjb21waWxlZDtcbiAgICBjb21waWxlZENhc2VTY2hlbWFzLnNvbWUoZnVuY3Rpb24gKGMpIHtcbiAgICAgIGlmIChjLnBhcmVudFNjaGVtYSA9PT0gcGFyZW50U2NoZW1hKSB7XG4gICAgICAgIGNvbXBpbGVkID0gYztcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFjb21waWxlZCAmJiBjcmVhdGUgIT09IGZhbHNlKSB7XG4gICAgICBjb21waWxlZCA9IHtcbiAgICAgICAgcGFyZW50U2NoZW1hOiBwYXJlbnRTY2hlbWEsXG4gICAgICAgIGNhc2VzOiB7fSxcbiAgICAgICAgZGVmYXVsdDogdHJ1ZVxuICAgICAgfTtcbiAgICAgIGNvbXBpbGVkQ2FzZVNjaGVtYXMucHVzaChjb21waWxlZCk7XG4gICAgfVxuICAgIHJldHVybiBjb21waWxlZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbXBpbGVPckJvb2xlYW4oc2NoZW1hKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBzY2hlbWEgPT0gJ2Jvb2xlYW4nXG4gICAgICAgICAgICA/IHNjaGVtYVxuICAgICAgICAgICAgOiBhanYuY29tcGlsZShzY2hlbWEpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdXRpbCA9IHJlcXVpcmUoJy4vX3V0aWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBkZWZGdW5jKGFqdikge1xuICBpZiAoYWp2LlJVTEVTLmtleXdvcmRzLnN3aXRjaCAmJiBhanYuUlVMRVMua2V5d29yZHMuaWYpIHJldHVybjtcblxuICB2YXIgbWV0YVNjaGVtYVJlZiA9IHV0aWwubWV0YVNjaGVtYVJlZihhanYpO1xuXG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICBpbmxpbmU6IHJlcXVpcmUoJy4vZG90anMvc3dpdGNoJyksXG4gICAgc3RhdGVtZW50czogdHJ1ZSxcbiAgICBlcnJvcnM6ICdmdWxsJyxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgaXRlbXM6IHtcbiAgICAgICAgcmVxdWlyZWQ6IFsgJ3RoZW4nIF0sXG4gICAgICAgIHByb3BlcnRpZXM6IHtcbiAgICAgICAgICAnaWYnOiBtZXRhU2NoZW1hUmVmLFxuICAgICAgICAgICd0aGVuJzoge1xuICAgICAgICAgICAgYW55T2Y6IFtcbiAgICAgICAgICAgICAgeyB0eXBlOiAnYm9vbGVhbicgfSxcbiAgICAgICAgICAgICAgbWV0YVNjaGVtYVJlZlxuICAgICAgICAgICAgXVxuICAgICAgICAgIH0sXG4gICAgICAgICAgJ2NvbnRpbnVlJzogeyB0eXBlOiAnYm9vbGVhbicgfVxuICAgICAgICB9LFxuICAgICAgICBhZGRpdGlvbmFsUHJvcGVydGllczogZmFsc2UsXG4gICAgICAgIGRlcGVuZGVuY2llczoge1xuICAgICAgICAgICdjb250aW51ZSc6IFsgJ2lmJyBdXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3N3aXRjaCcsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMgKGFqdikge1xuICB2YXIgdHJhbnNmb3JtID0ge1xuICAgIHRyaW1MZWZ0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9eW1xcc10rLywgJycpO1xuICAgIH0sXG4gICAgdHJpbVJpZ2h0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5yZXBsYWNlKC9bXFxzXSskLywgJycpO1xuICAgIH0sXG4gICAgdHJpbTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUudHJpbSgpO1xuICAgIH0sXG4gICAgdG9Mb3dlckNhc2U6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgfSxcbiAgICB0b1VwcGVyQ2FzZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gdmFsdWUudG9VcHBlckNhc2UoKTtcbiAgICB9LFxuICAgIHRvRW51bUNhc2U6IGZ1bmN0aW9uICh2YWx1ZSwgY2ZnKSB7XG4gICAgICByZXR1cm4gY2ZnLmhhc2hbbWFrZUhhc2hUYWJsZUtleSh2YWx1ZSldIHx8IHZhbHVlO1xuICAgIH1cbiAgfTtcblxuICBkZWZGdW5jLmRlZmluaXRpb24gPSB7XG4gICAgdHlwZTogJ3N0cmluZycsXG4gICAgZXJyb3JzOiBmYWxzZSxcbiAgICBtb2RpZnlpbmc6IHRydWUsXG4gICAgdmFsaWQ6IHRydWUsXG4gICAgY29tcGlsZTogZnVuY3Rpb24gKHNjaGVtYSwgcGFyZW50U2NoZW1hKSB7XG4gICAgICB2YXIgY2ZnO1xuXG4gICAgICBpZiAoc2NoZW1hLmluZGV4T2YoJ3RvRW51bUNhc2UnKSAhPT0gLTEpIHtcbiAgICAgICAgLy8gYnVpbGQgaGFzaCB0YWJsZSB0byBlbnVtIHZhbHVlc1xuICAgICAgICBjZmcgPSB7aGFzaDoge319O1xuXG4gICAgICAgIC8vIHJlcXVpcmVzIGBlbnVtYCBpbiBzY2hlbWFcbiAgICAgICAgaWYgKCFwYXJlbnRTY2hlbWEuZW51bSlcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01pc3NpbmcgZW51bS4gVG8gdXNlIGB0cmFuc2Zvcm06W1widG9FbnVtQ2FzZVwiXWAsIGBlbnVtOlsuLi5dYCBpcyByZXF1aXJlZC4nKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IHBhcmVudFNjaGVtYS5lbnVtLmxlbmd0aDsgaS0tOyBpKSB7XG4gICAgICAgICAgdmFyIHYgPSBwYXJlbnRTY2hlbWEuZW51bVtpXTtcbiAgICAgICAgICBpZiAodHlwZW9mIHYgIT09ICdzdHJpbmcnKSBjb250aW51ZTtcbiAgICAgICAgICB2YXIgayA9IG1ha2VIYXNoVGFibGVLZXkodik7XG4gICAgICAgICAgLy8gcmVxdWlyZXMgYWxsIGBlbnVtYCB2YWx1ZXMgaGF2ZSB1bmlxdWUga2V5c1xuICAgICAgICAgIGlmIChjZmcuaGFzaFtrXSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBlbnVtIHVuaXF1ZW5lc3MuIFRvIHVzZSBgdHJhbnNmb3JtOltcInRvRW51bUNhc2VcIl1gLCBhbGwgdmFsdWVzIG11c3QgYmUgdW5pcXVlIHdoZW4gY2FzZSBpbnNlbnNpdGl2ZS4nKTtcbiAgICAgICAgICBjZmcuaGFzaFtrXSA9IHY7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIChkYXRhLCBkYXRhUGF0aCwgb2JqZWN0LCBrZXkpIHtcbiAgICAgICAgLy8gc2tpcCBpZiB2YWx1ZSBvbmx5XG4gICAgICAgIGlmICghb2JqZWN0KSByZXR1cm47XG5cbiAgICAgICAgLy8gYXBwbHkgdHJhbnNmb3JtIGluIG9yZGVyIHByb3ZpZGVkXG4gICAgICAgIGZvciAodmFyIGogPSAwLCBsID0gc2NoZW1hLmxlbmd0aDsgaiA8IGw7IGorKylcbiAgICAgICAgICBkYXRhID0gdHJhbnNmb3JtW3NjaGVtYVtqXV0oZGF0YSwgY2ZnKTtcblxuICAgICAgICBvYmplY3Rba2V5XSA9IGRhdGE7XG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0YVNjaGVtYToge1xuICAgICAgdHlwZTogJ2FycmF5JyxcbiAgICAgIGl0ZW1zOiB7XG4gICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICBlbnVtOiBbXG4gICAgICAgICAgJ3RyaW1MZWZ0JywgJ3RyaW1SaWdodCcsICd0cmltJyxcbiAgICAgICAgICAndG9Mb3dlckNhc2UnLCAndG9VcHBlckNhc2UnLCAndG9FbnVtQ2FzZSdcbiAgICAgICAgXVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBhanYuYWRkS2V5d29yZCgndHJhbnNmb3JtJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcblxuICBmdW5jdGlvbiBtYWtlSGFzaFRhYmxlS2V5ICh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZS50b0xvd2VyQ2FzZSgpO1xuICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgS05PV05fVFlQRVMgPSBbJ3VuZGVmaW5lZCcsICdzdHJpbmcnLCAnbnVtYmVyJywgJ29iamVjdCcsICdmdW5jdGlvbicsICdib29sZWFuJywgJ3N5bWJvbCddO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGRlZkZ1bmMoYWp2KSB7XG4gIGRlZkZ1bmMuZGVmaW5pdGlvbiA9IHtcbiAgICBpbmxpbmU6IGZ1bmN0aW9uIChpdCwga2V5d29yZCwgc2NoZW1hKSB7XG4gICAgICB2YXIgZGF0YSA9ICdkYXRhJyArIChpdC5kYXRhTGV2ZWwgfHwgJycpO1xuICAgICAgaWYgKHR5cGVvZiBzY2hlbWEgPT0gJ3N0cmluZycpIHJldHVybiAndHlwZW9mICcgKyBkYXRhICsgJyA9PSBcIicgKyBzY2hlbWEgKyAnXCInO1xuICAgICAgc2NoZW1hID0gJ3ZhbGlkYXRlLnNjaGVtYScgKyBpdC5zY2hlbWFQYXRoICsgJy4nICsga2V5d29yZDtcbiAgICAgIHJldHVybiBzY2hlbWEgKyAnLmluZGV4T2YodHlwZW9mICcgKyBkYXRhICsgJykgPj0gMCc7XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICBhbnlPZjogW1xuICAgICAgICB7XG4gICAgICAgICAgdHlwZTogJ3N0cmluZycsXG4gICAgICAgICAgZW51bTogS05PV05fVFlQRVNcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgIHR5cGU6ICdhcnJheScsXG4gICAgICAgICAgaXRlbXM6IHtcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZW51bTogS05PV05fVFlQRVNcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIF1cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3R5cGVvZicsIGRlZkZ1bmMuZGVmaW5pdGlvbik7XG4gIHJldHVybiBhanY7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU0NBTEFSX1RZUEVTID0gWydudW1iZXInLCAnaW50ZWdlcicsICdzdHJpbmcnLCAnYm9vbGVhbicsICdudWxsJ107XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVmRnVuYyhhanYpIHtcbiAgZGVmRnVuYy5kZWZpbml0aW9uID0ge1xuICAgIHR5cGU6ICdhcnJheScsXG4gICAgY29tcGlsZTogZnVuY3Rpb24oa2V5cywgcGFyZW50U2NoZW1hLCBpdCkge1xuICAgICAgdmFyIGVxdWFsID0gaXQudXRpbC5lcXVhbDtcbiAgICAgIHZhciBzY2FsYXIgPSBnZXRTY2FsYXJLZXlzKGtleXMsIHBhcmVudFNjaGVtYSk7XG5cbiAgICAgIHJldHVybiBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgIGlmIChkYXRhLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBmb3IgKHZhciBrPTA7IGsgPCBrZXlzLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICB2YXIgaSwga2V5ID0ga2V5c1trXTtcbiAgICAgICAgICAgIGlmIChzY2FsYXJba10pIHtcbiAgICAgICAgICAgICAgdmFyIGhhc2ggPSB7fTtcbiAgICAgICAgICAgICAgZm9yIChpID0gZGF0YS5sZW5ndGg7IGktLTspIHtcbiAgICAgICAgICAgICAgICBpZiAoIWRhdGFbaV0gfHwgdHlwZW9mIGRhdGFbaV0gIT0gJ29iamVjdCcpIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIHZhciBwcm9wID0gZGF0YVtpXVtrZXldO1xuICAgICAgICAgICAgICAgIGlmIChwcm9wICYmIHR5cGVvZiBwcm9wID09ICdvYmplY3QnKSBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHByb3AgPT0gJ3N0cmluZycpIHByb3AgPSAnXCInICsgcHJvcDtcbiAgICAgICAgICAgICAgICBpZiAoaGFzaFtwcm9wXSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIGhhc2hbcHJvcF0gPSB0cnVlO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBmb3IgKGkgPSBkYXRhLmxlbmd0aDsgaS0tOykge1xuICAgICAgICAgICAgICAgIGlmICghZGF0YVtpXSB8fCB0eXBlb2YgZGF0YVtpXSAhPSAnb2JqZWN0JykgY29udGludWU7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IGk7IGotLTspIHtcbiAgICAgICAgICAgICAgICAgIGlmIChkYXRhW2pdICYmIHR5cGVvZiBkYXRhW2pdID09ICdvYmplY3QnICYmIGVxdWFsKGRhdGFbaV1ba2V5XSwgZGF0YVtqXVtrZXldKSlcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH07XG4gICAgfSxcbiAgICBtZXRhU2NoZW1hOiB7XG4gICAgICB0eXBlOiAnYXJyYXknLFxuICAgICAgaXRlbXM6IHt0eXBlOiAnc3RyaW5nJ31cbiAgICB9XG4gIH07XG5cbiAgYWp2LmFkZEtleXdvcmQoJ3VuaXF1ZUl0ZW1Qcm9wZXJ0aWVzJywgZGVmRnVuYy5kZWZpbml0aW9uKTtcbiAgcmV0dXJuIGFqdjtcbn07XG5cblxuZnVuY3Rpb24gZ2V0U2NhbGFyS2V5cyhrZXlzLCBzY2hlbWEpIHtcbiAgcmV0dXJuIGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgIHZhciBwcm9wZXJ0aWVzID0gc2NoZW1hLml0ZW1zICYmIHNjaGVtYS5pdGVtcy5wcm9wZXJ0aWVzO1xuICAgIHZhciBwcm9wVHlwZSA9IHByb3BlcnRpZXMgJiYgcHJvcGVydGllc1trZXldICYmIHByb3BlcnRpZXNba2V5XS50eXBlO1xuICAgIHJldHVybiBBcnJheS5pc0FycmF5KHByb3BUeXBlKVxuICAgICAgICAgICAgPyBwcm9wVHlwZS5pbmRleE9mKCdvYmplY3QnKSA8IDAgJiYgcHJvcFR5cGUuaW5kZXhPZignYXJyYXknKSA8IDBcbiAgICAgICAgICAgIDogU0NBTEFSX1RZUEVTLmluZGV4T2YocHJvcFR5cGUpID49IDA7XG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9